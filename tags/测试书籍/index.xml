<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>测试书籍 on 软件测试同学</title>
    <link>https://naod.com.cn/tags/%E6%B5%8B%E8%AF%95%E4%B9%A6%E7%B1%8D/</link>
    <description>Recent content in 测试书籍 on 软件测试同学</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2022 www.naod.com.cn</copyright>
    <lastBuildDate>Thu, 12 Mar 2020 09:48:56 +0000</lastBuildDate><atom:link href="https://naod.com.cn/tags/%E6%B5%8B%E8%AF%95%E4%B9%A6%E7%B1%8D/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>软件测试读书列表转载</title>
      <link>https://naod.com.cn/2020/03/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%BB%E4%B9%A6%E5%88%97%E8%A1%A8%E8%BD%AC%E8%BD%BD/</link>
      <pubDate>Thu, 12 Mar 2020 09:48:56 +0000</pubDate>
      
      <guid>https://naod.com.cn/2020/03/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%BB%E4%B9%A6%E5%88%97%E8%A1%A8%E8%BD%AC%E8%BD%BD/</guid>
      <description>之前收藏的一部分软件测试书籍清单，自己也阅读了部分数据，有一些收获和思考，故推荐给大家。
测试入门 软件测试（第2版） Software Testing (2e), Ron Patton 一本测试入门的好书，较全面地介绍了各种测试领域和方法，为测试新手提供了正确的观念和宽泛的基础。
软件测试的艺术（第2版） The Art of Software Testing (2e), Glenford J. Myers, Corey Sandler, Tom Badgett, Todd M. Thomas 一本“久经考验”的测试经典：1979年，第一版面试；25年后，第二版登场。平心而论，有些观点已经不能直接应用在测试实践中，但是仔细品味仍有所收获。毕竟，这是一本需要思考的书，而不是操作手册。
软件测试实战&amp;ndash;测试Web MSN 蔡为东 以Web MSN为测试对象，形象生动地介绍了针对图形界面的黑盒测试技术，有很强的实践性。围绕一个实例，全面地的介绍各种测试方法，是此书区别于其他测试书籍的一大特色。附文《胶着》是作者一段开发经历的回顾与小结，有笑有泪，仅凭此文便值回书资。
软件测试工程师面试指导 蔡为东 面 向初学者，介绍了软件测试行业、测试工程师素质要求、基本测试技术、求职策略、面试技巧、典型试题，对于测试新手或迈向测试行业的朋友有较高的参考价值。 此书还收录了一些对读者来信的回复，内容涉及职业规划、大学生就业、测试学习、测试实践等，针对当前常见的困惑，做出了谨慎且深思熟虑的回答。附文《我在 微软做软件测试外包》对于了解微软中国的流程与文化很有参考价值。
Essential Software Test Design Torbjrn Ryber 该 书专注于测试设计，深入浅出讲解了所有测试人员都需要掌握的基本测试技术。全书言简意赅、条理清晰、案例翔实，为测试实践打下了坚实基础。测试专家 James Bach受邀编写了第6章“探索式测试解析”（Exploratory Testing Explained），对于理解探索式测试的思想和方法很有帮助。
通用测试技术 计算机软件测试（第2版） Testing Computer Software (2e), Cem Kaner, Jack Falk, Hung Quo Nguyen 一 本值得反复参考的好书，&amp;ldquo;The bestselling software testing book of all time&amp;rdquo; 的美誉绝非浪得虚名。作者将多年的实践经验用平实的语言娓娓道来，内容涉及测试技术、测试管理、开发流程、思考方法、实践模式，可谓是一本测试典籍。部分 内容看似有些过时，但是其思想和方法仍旧有很高的借鉴价值。</description>
    </item>
    
    <item>
      <title>《软件测试实践-微软技术专家经验总结》读书笔记-3</title>
      <link>https://naod.com.cn/2016/10/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5-%E5%BE%AE%E8%BD%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-3/</link>
      <pubDate>Sun, 02 Oct 2016 18:20:23 +0000</pubDate>
      
      <guid>https://naod.com.cn/2016/10/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5-%E5%BE%AE%E8%BD%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-3/</guid>
      <description>测试技术分类系统： Cem Kaner-测试技术分类系统。测试技术会从7个方面对测试过程进行指导：范围-测试的对象；覆盖-测试的程度；测试者-由谁来执行测试；风险-测试要去发现的潜在问题；活动-测试如何执行；评估和测试先知-如何评价测试是否通过；结果导向-测试的目标。
六要素测试分类系统： 一、基于覆盖的测试技术关注测试的范围和覆盖。 典型的测试技术如下：
功能测试 &amp;ndash;覆盖产品的功能
功能或特性的集成测试 &amp;ndash;覆盖功能之间的交互
漫游测试 &amp;ndash;覆盖指定的一组测试对象
等价类分析 &amp;ndash;覆盖所有的等价类
边界测试 &amp;ndash;覆盖边界值和邻近区域
最佳代表测试 &amp;ndash;要求从众多测试用例中选择最有代表性的测试用例，常见的例子包括用户最可 能使用的数据、给产品最大挑战的数据、最能暴露风险的数据等。
域测试 &amp;ndash;从一个数值集合中选择测试输入数据（如等价类、边界值&amp;hellip;）,选择典型数据
测试想法目录 &amp;ndash;包括测试想法列表、质量特性列表、缺陷目录等启发式想法集合。测试人员要依次检查每个想法，选择合适的想法来设计具体的测试。
逻辑表达式 &amp;ndash;覆盖逻辑表达式的所有可能输入
多变量测试 &amp;ndash;测试多个变量的取值组合，组合测试时一种多变量测试
状态变迁测试 &amp;ndash;覆盖状态机中所有的变迁
用户界面测试 &amp;ndash;覆盖所有用户可访问的页面元素
基于规格说明的测试 &amp;ndash;检查规格说明的所有陈述得到正确的实现
基于需求的测试 &amp;ndash;检查所有需求被正确的实现
依从性测试 &amp;ndash;检查软件符合所有需要满足的法律和约定
配置测试 &amp;ndash;覆盖所有或典型的软硬件配置组合
本地化测试 &amp;ndash;覆盖所有被本地化的元素，包括界面字符串、日期格式、货币格式、字符集等。
二、基于测试者的测试技术关注谁来执行测试。 用户测试 &amp;ndash;让实际用户测试产品。
Alpha测试 &amp;ndash;让产品的早期用户（公司同事等）试用产品。
Beta测试 &amp;ndash;让一批实际用户测试产品
缺陷大扫除 &amp;ndash;邀请项目团队的所有人员参与测试。
专家测试 &amp;ndash;邀请领域专家和测试人员结对测试
结对测试 &amp;ndash;让测试人员和测试人员结对、测试人员和程序员结对，从而产生更多差异化的测试想法。
内部试用 &amp;ndash;让项目团队在日常工作中使用自己开发的产品，从而尽早发现实际用户会遇到的问题。
本地化测试 &amp;ndash;让熟悉目标市场文化的人来测试软件。
三、基于风险的测试技术关注潜在问题。 边界测试 &amp;ndash;关注软件在处理边界值时很可能出错的风险
快速测试 &amp;ndash;针对一组典型的软件错误实施攻击
结束测试 &amp;ndash;利用输入约束、输出约束、计算约束和数据约束对软件进行测试。这些约束往往涉及软件能力的边界，会暴露软件的不足。
逻辑表达式 &amp;ndash;关注多个条件变量的组合，以检查软件能否处理一些罕见的情况。
压力测试 &amp;ndash;关注软件如何应对远远超出正常工作量的负荷，此时一些隐藏的缺陷很可能会暴露。
负载测试 &amp;ndash;关注软件能否有效地利用资源去处理工作负荷。其针对的风险是软件不能合理地使用资源，当工作负荷还没有到达预期上限时，它已经占用了太多的资源，且处理速度变得很慢。</description>
    </item>
    
    <item>
      <title>《软件测试实践-微软技术专家经验总结》读书笔记-2</title>
      <link>https://naod.com.cn/2016/10/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5-%E5%BE%AE%E8%BD%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2/</link>
      <pubDate>Sun, 02 Oct 2016 09:37:23 +0000</pubDate>
      
      <guid>https://naod.com.cn/2016/10/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5-%E5%BE%AE%E8%BD%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2/</guid>
      <description>测试文档 移交文档 测试人员离开项目时，需要移交的测试文档
被测对象概述 文档链接（需求文档，实际文档，测试设计规约等文档的链接） 基本测试想法(列举10条最重要的测试想法) 经验和技巧（阐述测试人员在测试实战中积累的经验与技巧，包括好用的工具，未公开的设置，快速的调试手段） 已知局限（介绍被测试对象的局限和缺陷） 测试自动化（介绍可用的自动化工具和测试用例） 测试数据（介绍可用的测试数据文件，测试数据库） 何处可以增加测试设计的深度 - 最可能发生错误的区域 如果测试人员知道哪些区域可能存在大量缺陷，就在那里仔细的测试。缺陷往往聚集在一起，应该尽早测试这些高危区域
- 错误最明显的区域 从用户的角度看待产品，尝试去发现那些用户最容易发现的错误。这让测试人员专注于对用户最重要的情景和功能。
- 最常使用的程序区域 测试用户最常使用的功能，以提高软件的稳定性
- 最有差别的测试区域 产品想要赢得用户需要提供独一无二的特性，这些特性被称为软件的“卖点”。测试人员需要仔细测试这些区域，因为在卖点上失败将导致竞争失利。
- 最难修正的区域 许多软件缺陷没有被修正是因为没有时间完成高难度的修复。应该尽早测试难以修正的区域。以便程序员有更多的时间去修复缺陷
- 测试人员最理解的区域 通过测试一个熟悉的区域和它的周边区域，测试人员能够快速的测完一个局部，并更好的理解产品。这有助于它更有效的进入下一个区域
测试技术 测试是为了发现错误而执行程序的过程，那么测试技术就是运行程序并判断其对错的具体方法
测试技术会从7个方面对测试过程进行指导 - 范围 测试的对象。例如功能测试的测试对象通常是一个具体的功能或特性
- 覆盖 测试的程度。例如如果测试时间有限，测试人员通常只能测试一个功能的主要场景；如果测试时间充裕，他会测试更多的场景和操作方式，以扩大测试覆盖。通常，测试人员会统一考虑测试的范围和覆盖。
- 测试者 是谁来执行测试
- 风险 测试要去发现的潜在问题，例如Google ACC所重点侦测的风险是产品的功能不能提供有竞争力的特性。
- 活动 测试如何执行。例如两因素组合测试规定测试用例要覆盖任意两个因素的取值组合。
- 评估和测试先知 如歌评价测试是否通过。例如测试人员会使用软件的先前版本来判断软件的行为是否向后兼容。
- 结果导向 测试的目标。例如BVT(Build verification testing)的目标是检查构建是否足够稳定可用于更大范围的测试</description>
    </item>
    
    <item>
      <title>《软件测试实践-微软技术专家经验总结》读书笔记-1</title>
      <link>https://naod.com.cn/2016/10/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5-%E5%BE%AE%E8%BD%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-1/</link>
      <pubDate>Sat, 01 Oct 2016 09:37:23 +0000</pubDate>
      
      <guid>https://naod.com.cn/2016/10/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5-%E5%BE%AE%E8%BD%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-1/</guid>
      <description>坚持阅读缺陷报告 在项目过程中，测试人员应持续阅读他人或自己提交的缺陷报告，才能更好的理解项目进展，并激发测试灵感和想法
了解当前有哪些活跃的缺陷 学习测试技巧，完善测试设计 获得测试灵感（想法） 追踪软件设计 总结缺陷模式和类型 测试文档 项目所需文档 测试计划 测试设计规约 测试总结报告 测试进度报告 缺陷报告 其他文档 操作文档 测试笔记 测试资料 移交文档 测试知识库 测试文档演化 测试设计过程 测试执行过程 测试评估过程 测试学习过程 如何实效的设计测试文档 它建立了被测试对象的整体模型 它提供了可扩展的测试设计框架 它提供了测试覆盖的目标 它用简洁的形式提供丰富的信息 它格式灵活，允许用多种方式记录信息 测试文档维护策略 在项目早期，编写测试设计规约，概述测试策略（邀请项目相关人员进行评审） 在测试设计规约的指导下，为测试活动收集，复用，编写，改成测试文档 将文档集中管理，并周期性地备份 请同事评阅文档 在项目的重要里程碑完成时，整理已有文档 测试设计规约 测试设计规约是一个容器，可以容纳各种测试模型和资料 测试人员需要建立测试设计的框架 测试想法优于测试用例 合理地使用文档模板 测试灵感和测试想法 单个功能 该功能与当前测试任务相关吗？ 该功能存在什么风险？可能会有什么缺陷？ 通过什么测试可以发现这些缺陷？ 在上次测试中，该功能表现如何？已有的测试想法，哪些值得再次尝试？哪些不必要再测？ 依据当前的进度和资源。如何实施这些测试？ 功能列表是否充分？有没有漏掉一些功能？ 组合功能 该功能与哪些功能相关？ 功能的组合有没有揭示出新的风险？可能会有哪些缺陷？ 哪些功能访问同一批数据？哪些是生产者？哪些是消费者？ 如何设计测试来同时测试这些功能？ 如何构造一个有意义的业务流程，让它能够访问尽可能多的功能与数据？ 对于相互依赖的功能，某个功能的失败是否对其他功能造成恶劣影响？ 测试想法的来源 关系人 质量标准 产品恐惧 使用情景 领域信息 用户 业务 目标 业务对象 产品愿景 业务知识 法律因素 团队 创意想法 内部资料 你自己 外部 标准 参考资料 搜索 项目 项目背景 信息对象 项目风险 测试资料 债务 交流 语境分析 交付品 工具 产品 能力 失败模式 模型 数据 白盒 产品历史 小道信息 实际软件 技术 竞争者 软件质量特性集 能力 （完整性 准确性 高效性 可交互性 并发 可扩展性） 可靠性 可用性 魅力 安全性 性能 （容量 响应度 可达性 反馈 可伸缩性） IT能力 兼容性 可支持性 可测性 可维护性 可移植性 </description>
    </item>
    
  </channel>
</rss>
