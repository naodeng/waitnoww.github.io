<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-09T02:35:06.386Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>naodeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cypress UI自动化测试框架学习（2）- 测试报告</title>
    <link href="http://example.com/2022/02/09/Cypress-UI-Automation-Test-Framework-Learning-Test-Report/"/>
    <id>http://example.com/2022/02/09/Cypress-UI-Automation-Test-Framework-Learning-Test-Report/</id>
    <published>2022-02-09T02:34:06.000Z</published>
    <updated>2022-02-09T02:35:06.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>由于Cypress测试报告是建立在Mocha测试报告之上的，这意味着任何为Mocha构建的报告程序都可以与Cypress一起使用。</p><p>以下是内置的Mocha测试类型列表（Cypress也同样支持）：<a href="https://mochajs.org/#reporters">https://mochajs.org/#reporters</a></p><h2 id="前置准备工作"><a href="#前置准备工作" class="headerlink" title="前置准备工作"></a>前置准备工作</h2><p>在package.json文件的scripts模块加入了如下脚本：”cypress:run”:”cypress run”，便于后面生成报告</p><p>不同运行脚本的区别：</p><ul><li>cypress run：是以无头浏览器模式跑测试用例文件夹下的所有测试用例</li><li>cypress open：会打开测试用例集的界面，需要手动运行</li></ul><h2 id="常用报告类型"><a href="#常用报告类型" class="headerlink" title="常用报告类型"></a>常用报告类型</h2><h3 id="spec格式报告"><a href="#spec格式报告" class="headerlink" title="spec格式报告"></a>spec格式报告</h3><ul><li>运行命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run cypress:run --reporter=spec</span><br></pre></td></tr></table></figure><ul><li>报告截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqx2v3ihu9j31ka0eojtc.jpg"></li></ul><h3 id="Dot格式报告"><a href="#Dot格式报告" class="headerlink" title="Dot格式报告"></a>Dot格式报告</h3><ul><li><p>前置：在cypress.json文件新增”reporter”: “dot”信息</p></li><li><p>运行方式：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run cypress:run</span><br></pre></td></tr></table></figure><ul><li>报告截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy74s99hij30qo0800t5.jpg"></li></ul><h3 id="json格式报告"><a href="#json格式报告" class="headerlink" title="json格式报告"></a>json格式报告</h3><ul><li><p>前置：在cypress.json文件新增”reporter”: “json”信息</p></li><li><p>运行方式：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run cypress:run</span><br></pre></td></tr></table></figure><ul><li>报告截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy6zo6iu9j30u00u644f.jpg"></li></ul><h3 id="List格式报告"><a href="#List格式报告" class="headerlink" title="List格式报告"></a>List格式报告</h3><ul><li><p>前置：在cypress.json文件新增”reporter”: “list”信息</p></li><li><p>运行方式：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run cypress:run</span><br></pre></td></tr></table></figure><ul><li>报告截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy78or4xhj30v80by76y.jpg"></li></ul><h3 id="NYAN格式报告"><a href="#NYAN格式报告" class="headerlink" title="NYAN格式报告"></a>NYAN格式报告</h3><ul><li><p>前置：在cypress.json文件新增”reporter”: “nyan”信息</p></li><li><p>运行方式：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run cypress:run</span><br></pre></td></tr></table></figure><ul><li>报告截图</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy7cxd155j30my09mq3k.jpg"></p><h2 id="高大上报告类型"><a href="#高大上报告类型" class="headerlink" title="高大上报告类型"></a>高大上报告类型</h2><h3 id="Mochawesome格式报告"><a href="#Mochawesome格式报告" class="headerlink" title="Mochawesome格式报告"></a>Mochawesome格式报告</h3><ul><li>前置：安装 Mocha、Mochawesome 至项目中</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mocha</span><br><span class="line">npm install --save-dev mochawesome</span><br></pre></td></tr></table></figure><ul><li><p>在cypress.json文件新增”reporter”: “mochawesome”信息</p></li><li><p>运行命令</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run cypress:run</span><br></pre></td></tr></table></figure><ul><li>报告截图</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy7w33bfsj31xd0u0q78.jpg"></p><h3 id="allure格式报告"><a href="#allure格式报告" class="headerlink" title="allure格式报告"></a>allure格式报告</h3><ul><li>前置：安装 allure（推荐使用brew安装）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install allure</span><br></pre></td></tr></table></figure><ul><li>在cypress.json文件新增如下信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;reporter&quot;: &quot;junit&quot;,</span><br><span class="line">&quot;reporterOptions&quot;: &#123;</span><br><span class="line">    &quot;mochaFile&quot;: &quot;results/test_report_[hash].xml&quot;,</span><br><span class="line">    &quot;toConsole&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run cypress:run</span><br></pre></td></tr></table></figure><ul><li>生成报告</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ allure serve results </span><br></pre></td></tr></table></figure><ul><li>报告截图</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy9t4vp9xj31p80u044v.jpg"></p><h3 id="Dashboard格式报告"><a href="#Dashboard格式报告" class="headerlink" title="Dashboard格式报告"></a>Dashboard格式报告</h3><blockquote><p>待完善，参考资料：<a href="https://docs.cypress.io/guides/dashboard/introduction#Features">https://docs.cypress.io/guides/dashboard/introduction#Features</a></p></blockquote><ul><li>运行命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress run --record --key 7aaee33b-f67b-4993-8d6c-2c392a1bd1c8</span><br></pre></td></tr></table></figure><ul><li>报告截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqya4w0n7xj31op0u0do2.jpg"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;由于Cypress测试报告是建立在Mocha测试报告之上的，这意味着任何为Mocha构建的报告程序都可以与Cypress一起</summary>
      
    
    
    
    
    <category term="软件测试" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Cypress UI自动化测试框架学习（1）- 入门</title>
    <link href="http://example.com/2022/02/09/Cypress-UI-Automation-Testing-Framework-Learning-Getting-Started/"/>
    <id>http://example.com/2022/02/09/Cypress-UI-Automation-Testing-Framework-Learning-Getting-Started/</id>
    <published>2022-02-09T02:32:06.000Z</published>
    <updated>2022-02-09T02:35:12.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>基于 JavaScript 的前端自动化测试工具，可以对浏览器中运行的任何内容进行快速、简单、可靠的测试</p><p>Cypress 是自集成的，提供了一套完整的端到端测试，无须借助其他外部工具，安装后即可快速地创建、编写、运行测试用例，且对每一步操作都支持回看</p><p>不同于其他只能测试 UI 层的前端测试工具，Cypress 允许编写所有类型的测试，覆盖了测试金字塔模型的所有测试类型【界面测试，集成测试，单元测试】</p><p>Cypress官网：<a href="https://www.cypress.io/">https://www.cypress.io/</a></p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><blockquote><p>下面以MacOS来进行介绍，其他系统可参考官网信息</p></blockquote><h3 id="Operating-System"><a href="#Operating-System" class="headerlink" title="Operating System"></a>Operating System</h3><ul><li>macOS 10.9 and above (64-bit only)</li><li>Node.js 12 or 14 and above</li></ul><h3 id="Before-Started"><a href="#Before-Started" class="headerlink" title="Before Started"></a>Before Started</h3><ul><li>已安装好node.js和npm</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqvntxlww1j30k406waau.jpg"></p><ul><li>已安装好vs code或者其他代码编辑器</li></ul><h3 id="Started-and-Run"><a href="#Started-and-Run" class="headerlink" title="Started and Run"></a>Started and Run</h3><ul><li>Step1：通过npm新建项目</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 新建项目文件夹</span><br><span class="line">$ mkdir cypress-demo</span><br><span class="line"># 进入项目文件夹</span><br><span class="line">$ cd cypress-demo</span><br><span class="line"># npm项目环境准备</span><br><span class="line">$ npm init</span><br></pre></td></tr></table></figure><ul><li>Step2：安装cypress</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 项目安装cypress包</span><br><span class="line">$ npm install cypress --save-dev</span><br></pre></td></tr></table></figure><ul><li>Step3：运行cypress程序</li></ul><blockquote><p>若提示：npm ERR! missing script: cypress:open，可在项目根目录package.json文件的scripts下新增”cypress:open”: “cypress open”，保存后再次运行命令即可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动demo</span><br><span class="line">$ npm run cypress:open</span><br></pre></td></tr></table></figure><h3 id="Started-Screenshot"><a href="#Started-Screenshot" class="headerlink" title="Started Screenshot"></a>Started Screenshot</h3><ul><li><p>运行截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqvsqw8ytcj323h0u0qp2.jpg"></p></li><li><p>demo用例执行截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqvsshqeflj31gl0u0nbf.jpg"></p></li></ul><h2 id="Try-First-Testscript"><a href="#Try-First-Testscript" class="headerlink" title="Try First Testscript"></a>Try First Testscript</h2><h3 id="Testcase"><a href="#Testcase" class="headerlink" title="Testcase"></a>Testcase</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.访问光谷社区主页http://www.guanggoo.com/</span><br><span class="line">2.验证是否正确跳转到光谷社区页面</span><br><span class="line">3.验证网页标题是否正确</span><br><span class="line">4.点击登录按钮，验证正确跳转到登录页面</span><br><span class="line">5.在登录页面输入用户名和输入密码</span><br><span class="line">6.点击登录按钮，验证登录成功</span><br></pre></td></tr></table></figure><h3 id="Testscript"><a href="#Testscript" class="headerlink" title="Testscript"></a>Testscript</h3><ul><li><p>在项目cypress&#x2F;integration下新建demo文件夹</p></li><li><p>在demo文件夹下新建demo-guanggoo.js</p></li><li><p>demo-guanggoo.js编写测试脚本</p></li></ul><blockquote><p>脚本中账号密码需换成自己的账号密码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">describe(&#x27;first testcase for cypress&#x27;,function()&#123;</span><br><span class="line">    it(&#x27;visit guanggoo homepage and login for guanggoo:&#x27;,function()&#123;</span><br><span class="line"></span><br><span class="line">        // 访问并登录光谷社区</span><br><span class="line">        cy.visit(&#x27;http://www.guanggoo.com/&#x27;) //访问url</span><br><span class="line">        cy.url().should(&#x27;include&#x27;,&#x27;www.guanggoo.com&#x27;)     //验证目标url 是否正确包含光谷社区正确域名 验证是否正确跳转到光谷社区页面</span><br><span class="line">        cy.title().should(&#x27;contain&#x27;,&#x27;光谷社区&#x27;)  //验证页面 title 是否正确</span><br><span class="line">        cy.get(&#x27;:nth-child(1) &gt; .nav-collapse&#x27;).click()   //点击登录按钮</span><br><span class="line">        cy.url().should(&#x27;include&#x27;,&#x27;login&#x27;)  //验证正确跳转到登录页面</span><br><span class="line">        cy.get(&#x27;#email&#x27;) //根据 css 定位用户名输入框</span><br><span class="line">        .type(&#x27;dengnao.123@163.com&#x27;)        //输入用户名</span><br><span class="line">        cy.get(&#x27;#password&#x27;) //根据 css 定位密码输入框</span><br><span class="line">        .type(&#x27;xxxxxxx&#x27;)        //输入密码</span><br><span class="line">        cy.get(&#x27;.btn-success&#x27;).click()   //点击登录按钮</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Run-Screenshot"><a href="#Run-Screenshot" class="headerlink" title="Run Screenshot"></a>Run Screenshot</h3><ul><li>运行cypress程序</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">$ npm run cypress:open</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqvtcq43csj323f0u0qn9.jpg"></p><ul><li>页面上选择点击运行demo-guanggoo.js即可</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqvtjib8jdj31g80u0e81.jpg"></p><ul><li>运行通过无报错，代表用例编写成功</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;基于 JavaScript 的前端自动化测试工具，可以对浏览</summary>
      
    
    
    
    
    <category term="软件测试" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>多少测试覆盖度才算足够</title>
    <link href="http://example.com/2022/02/08/How-Much-Testing-is-Enough/"/>
    <id>http://example.com/2022/02/08/How-Much-Testing-is-Enough/</id>
    <published>2022-02-08T13:56:40.000Z</published>
    <updated>2022-02-08T14:12:37.039Z</updated>
    
    <content type="html"><![CDATA[<p>每个软件开发人员和团队都在努力解决的一个熟悉的问题是，“多少测试足以使软件版本合格？” 很大程度上取决于软件的类型、用途和目标受众。人们会期望一种比简单的智能手机手电筒应用程序更严格的测试商业搜索引擎的方法。然而，无论是什么应用，多少测试才足够的问题很难用明确的术语来回答。更好的方法是提供可用于定义最适合手头案例的认证过程和测试策略的考虑因素或经验法则。以下提示提供了一个有用的标准：</p><ul><li>记录您的流程或策略。</li><li>有坚实的单元测试基础。</li><li>不要吝啬集成测试。</li><li>对关键用户旅程执行端到端测试。</li><li>了解并实施其他测试层级。</li><li>了解您的代码和功能覆盖范围。</li><li>使用来自现场的反馈来改进您的流程。</li></ul><span id="more"></span><h2 id="记录您的流程或策略"><a href="#记录您的流程或策略" class="headerlink" title="记录您的流程或策略"></a>记录您的流程或策略</h2><p>如果您已经在测试您的产品，请记录整个过程。这对于能够为以后的版本重复测试并对其进行分析以进行进一步改进至关重要。如果这是您的第一个版本，最好有一个书面的测试计划或策略。事实上，任何产品设计都应该有书面的测试计划或策略。</p><h2 id="有坚实的单元测试基础"><a href="#有坚实的单元测试基础" class="headerlink" title="有坚实的单元测试基础"></a>有坚实的单元测试基础</h2><p>一个很好的起点是编写伴随代码的单元测试。单元测试测试在功能单元级别编写的代码。对外部服务的依赖要么被模拟，要么被伪造。 </p><p><em>模拟</em>具有与生产依赖项相同的接口，但仅检查对象是否根据设定的期望使用和&#x2F;或返回测试控制的值，而不是其正常功能的完整实现。</p><p>另一方面，a <em>fake是依赖项的浅层实现，但理想情况下应该没有它自己的依赖项。</em>Fakes 提供了比模拟更广泛的功能，并且应该由提供依赖项的生产版本的团队维护。这样，随着依赖项的发展，伪造者和单元测试编写者可以确信伪造品反映了生产依赖项的功能。</p><p>在包括 Google 在内的许多公司中，都有要求任何代码更改以使相应的单元测试用例通过的最佳实践。随着代码库的扩展，在提交代码之前执行大量此类测试是在错误潜入代码库之前捕获错误的重要部分。这可以节省以后编写集成测试、调试和验证对现有代码的修复的时间。</p><h2 id="不要吝啬集成测试"><a href="#不要吝啬集成测试" class="headerlink" title="不要吝啬集成测试"></a>不要吝啬集成测试</h2><p>随着代码库的增长并达到可以作为一个组进行测试的功能单元数量的地步，是时候建立一个坚实的集成测试基础了。集成测试需要一小部分单元，通常只有两个单元，并作为一个整体测试它们的行为，验证它们是否可以连贯地协同工作。</p><p>开发人员通常认为集成测试可以被取消优先级甚至跳过，以支持完整的端到端测试。毕竟，后者真正测试了用户会使用它的产品。然而，拥有一套全面的集成测试与拥有坚实的单元测试基础同样重要（请参阅早期的 Google 博客文章，<a href="https://testing.googleblog.com/2020/11/fixing-test-hourglass.html">修复测试沙漏</a>）。</p><p>原因在于集成测试比完整的端到端测试具有更少的依赖性。因此，具有较小环境的集成测试将比具有全套依赖关系的完整端到端测试更快、更可靠（请参阅早期的 Google 博客文章，<a href="https://testing.googleblog.com/2020/12/test-flakiness-one-of-main-challenges.html">Test Fakiness - One of the Main自动化测试的挑战</a>）。</p><h2 id="对关键用户旅程执行端到端测试"><a href="#对关键用户旅程执行端到端测试" class="headerlink" title="对关键用户旅程执行端到端测试"></a>对关键用户旅程执行端到端测试</h2><p>到目前为止的讨论涵盖了在其组件级别测试产品，首先作为单个组件（单元测试），然后作为组件和依赖项组（集成测试）。现在是时候像用户使用它一样端到端地测试产品了。这非常重要，因为不仅要测试独立的功能，还要测试包含各种功能的整个工作流程。在谷歌，这些工作流程——关键目标和用户为实现该目标而执行的任务旅程的组合——被称为关键用户旅程 (CUJ)。了解 CUJ，记录它们，然后使用端到端测试（希望以自动化方式）验证它们完成了<a href="https://docs.google.com/presentation/d/15gNk21rjer3xo-b1ZqyQVGebOp_aPvHU3YH7YnOMxtE/edit#slide=id.g437663ce1_53_98">测试金字塔</a>。</p><h2 id="了解并实施其他测试层"><a href="#了解并实施其他测试层" class="headerlink" title="了解并实施其他测试层"></a>了解并实施其他测试层</h2><p>单元、集成和端到端测试解决了产品的功能级别。了解其他测试层级很重要，包括：</p><ul><li>性能测试 - 测量应用程序或服务的延迟或吞吐量。</li><li>负载和可扩展性测试 - 在越来越高的负载下测试您的应用程序或服务。</li><li>容错测试 - 测试您的应用程序的行为，因为不同的依赖关系要么失败，要么完全崩溃。</li><li>安全测试 - 测试您的服务或应用程序中的已知漏洞。</li><li>可访问性测试 - 确保每个人都可以访问和使用该产品，包括各种残障人士。</li><li>本地化测试 - 确保产品可以在特定语言或地区使用。</li><li>全球化测试——确保产品可以被世界各地的人们使用。</li><li>隐私测试 - 评估和减轻产品中的隐私风险。</li><li>可用性测试 - 测试用户友好性。</li></ul><p>同样，重要的是要在您的审查周期中尽早进行这些测试过程。较小的性能测试可以更早地检测到回归并在端到端测试期间节省调试时间。</p><h2 id="了解您的代码和功能覆盖范围"><a href="#了解您的代码和功能覆盖范围" class="headerlink" title="了解您的代码和功能覆盖范围"></a>了解您的代码和功能覆盖范围</h2><p>到目前为止，已经从定性的角度研究了多少测试就足够的问题。对不同类型的测试进行了审查，并提出较小和较早的论点比较大或较晚更好。现在将从定量的角度研究这个问题，同时考虑代码覆盖技术。</p><p>Wikipedia 有一篇关于<a href="https://en.wikipedia.org/wiki/Code_coverage">代码覆盖率</a>的精彩文章，概述并讨论了不同类型的覆盖率，包括语句、边缘、分支和条件覆盖率。有几种开源工具可用于测量大多数流行编程语言（如 Java、C++、Go 和 Python）的覆盖率。下表包含部分列表：</p><table><thead><tr><th>Language</th><th>Tool</th></tr></thead><tbody><tr><td>Java</td><td>JaCoCo</td></tr><tr><td>Java</td><td>JCov</td></tr><tr><td>Java</td><td>OpenClover</td></tr><tr><td>Python</td><td>Coverage.py</td></tr><tr><td>C++</td><td>Bullseye</td></tr><tr><td>Go</td><td>Built in coverage support (go -cover)</td></tr></tbody></table><p>表 1 - 不同语言的开源覆盖工具</p><p>这些工具中的大多数都以百分比形式提供摘要。例如，80% 的代码覆盖率意味着<em>大约</em>80% 的代码被覆盖，<em>大约</em>20% 的代码未被覆盖。同时，重要的是要理解，仅仅因为你覆盖了特定的代码区域，这段代码仍然可能有错误。</p><p>覆盖的另一个概念称为变更列表覆盖。更改列表覆盖率测量更改或添加的行中的覆盖率。对于积累了技术债务并且在整个代码库中覆盖率低的团队来说，它很有用。这些团队可以制定一项政策，增加他们的增量覆盖范围将导致整体改进。</p><p>到目前为止，覆盖讨论集中在测试（函数、行等）对代码的覆盖。另一种类型的覆盖是特征覆盖或行为覆盖。对于功能覆盖，重点是识别特定版本中已提交的功能并为其实现创建测试。对于行为覆盖，重点是识别 CUJ 并创建适当的测试来跟踪它们。同样，了解您“未发现”的特征和行为可能是您了解风险的有用指标。</p><h2 id="使用现场反馈来改进您的流程"><a href="#使用现场反馈来改进您的流程" class="headerlink" title="使用现场反馈来改进您的流程"></a>使用现场反馈来改进您的流程</h2><p>了解和改进您的资格认证过程的一个非常重要的部分是软件发布后从现场收到的反馈。拥有一个跟踪中断、错误和其他问题的流程，以改进资格的行动项目的形式，对于最大限度地减少后续版本中的回归风险至关重要。此外，行动项目应该（1）强调在资格认证过程中尽早填补测试空白，（2）解决战略问题，例如缺乏特定类型的测试，例如负载或容错测试. 同样，这就是为什么记录您的资格认证过程很重要，以便您可以根据从现场获得的数据重新评估它。</p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>创建全面的资格认证流程和测试策略来回答“多少测试才足够？”这个问题。可能是一项复杂的任务。希望这里给出的提示可以帮助您。总之：</p><ul><li>记录您的流程或策略。</li><li>有坚实的单元测试基础。</li><li>不要吝啬集成测试。</li><li>对关键用户旅程执行端到端测试。</li><li>了解并实施其他测试层级。</li><li>了解您的代码和功能覆盖范围。</li><li>使用来自现场的反馈来改进您的流程。</li></ul><h4 id="原文链接：https-testing-googleblog-com-2021-06-how-much-testing-is-enough-html-m-1"><a href="#原文链接：https-testing-googleblog-com-2021-06-how-much-testing-is-enough-html-m-1" class="headerlink" title="原文链接：https://testing.googleblog.com/2021/06/how-much-testing-is-enough.html?m=1"></a>原文链接：<a href="https://testing.googleblog.com/2021/06/how-much-testing-is-enough.html?m=1">https://testing.googleblog.com/2021/06/how-much-testing-is-enough.html?m=1</a></h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;每个软件开发人员和团队都在努力解决的一个熟悉的问题是，“多少测试足以使软件版本合格？” 很大程度上取决于软件的类型、用途和目标受众。人们会期望一种比简单的智能手机手电筒应用程序更严格的测试商业搜索引擎的方法。然而，无论是什么应用，多少测试才足够的问题很难用明确的术语来回答。更好的方法是提供可用于定义最适合手头案例的认证过程和测试策略的考虑因素或经验法则。以下提示提供了一个有用的标准：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录您的流程或策略。&lt;/li&gt;
&lt;li&gt;有坚实的单元测试基础。&lt;/li&gt;
&lt;li&gt;不要吝啬集成测试。&lt;/li&gt;
&lt;li&gt;对关键用户旅程执行端到端测试。&lt;/li&gt;
&lt;li&gt;了解并实施其他测试层级。&lt;/li&gt;
&lt;li&gt;了解您的代码和功能覆盖范围。&lt;/li&gt;
&lt;li&gt;使用来自现场的反馈来改进您的流程。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="软件测试，测试覆盖率" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%EF%BC%8C%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87/"/>
    
  </entry>
  
</feed>
