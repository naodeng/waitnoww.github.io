<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>软件测试同学</title>
  
  
  <link href="https://naod.com.cn/atom.xml" rel="self"/>
  
  <link href="https://naod.com.cn/"/>
  <updated>2022-02-10T07:15:04.570Z</updated>
  <id>https://naod.com.cn/</id>
  
  <author>
    <name>naodeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多少测试覆盖度才算足够</title>
    <link href="https://naod.com.cn/2022/02/08/How-Much-Testing-is-Enough/"/>
    <id>https://naod.com.cn/2022/02/08/How-Much-Testing-is-Enough/</id>
    <published>2022-02-08T13:56:40.000Z</published>
    <updated>2022-02-10T07:15:04.570Z</updated>
    
    <content type="html"><![CDATA[<p>每个软件开发人员和团队都在努力解决的一个熟悉的问题是，“多少测试足以使软件版本合格？” 很大程度上取决于软件的类型、用途和目标受众。人们会期望一种比简单的智能手机手电筒应用程序更严格的测试商业搜索引擎的方法。然而，无论是什么应用，多少测试才足够的问题很难用明确的术语来回答。更好的方法是提供可用于定义最适合手头案例的认证过程和测试策略的考虑因素或经验法则。以下提示提供了一个有用的标准：</p><ul><li>记录您的流程或策略。</li><li>有坚实的单元测试基础。</li><li>不要吝啬集成测试。</li><li>对关键用户旅程执行端到端测试。</li><li>了解并实施其他测试层级。</li><li>了解您的代码和功能覆盖范围。</li><li>使用来自现场的反馈来改进您的流程。</li></ul><span id="more"></span><h2 id="记录您的流程或策略"><a href="#记录您的流程或策略" class="headerlink" title="记录您的流程或策略"></a>记录您的流程或策略</h2><p>如果您已经在测试您的产品，请记录整个过程。这对于能够为以后的版本重复测试并对其进行分析以进行进一步改进至关重要。如果这是您的第一个版本，最好有一个书面的测试计划或策略。事实上，任何产品设计都应该有书面的测试计划或策略。</p><h2 id="有坚实的单元测试基础"><a href="#有坚实的单元测试基础" class="headerlink" title="有坚实的单元测试基础"></a>有坚实的单元测试基础</h2><p>一个很好的起点是编写伴随代码的单元测试。单元测试测试在功能单元级别编写的代码。对外部服务的依赖要么被模拟，要么被伪造。 </p><p><em>模拟</em>具有与生产依赖项相同的接口，但仅检查对象是否根据设定的期望使用和&#x2F;或返回测试控制的值，而不是其正常功能的完整实现。</p><p>另一方面，a <em>fake是依赖项的浅层实现，但理想情况下应该没有它自己的依赖项。</em>Fakes 提供了比模拟更广泛的功能，并且应该由提供依赖项的生产版本的团队维护。这样，随着依赖项的发展，伪造者和单元测试编写者可以确信伪造品反映了生产依赖项的功能。</p><p>在包括 Google 在内的许多公司中，都有要求任何代码更改以使相应的单元测试用例通过的最佳实践。随着代码库的扩展，在提交代码之前执行大量此类测试是在错误潜入代码库之前捕获错误的重要部分。这可以节省以后编写集成测试、调试和验证对现有代码的修复的时间。</p><h2 id="不要吝啬集成测试"><a href="#不要吝啬集成测试" class="headerlink" title="不要吝啬集成测试"></a>不要吝啬集成测试</h2><p>随着代码库的增长并达到可以作为一个组进行测试的功能单元数量的地步，是时候建立一个坚实的集成测试基础了。集成测试需要一小部分单元，通常只有两个单元，并作为一个整体测试它们的行为，验证它们是否可以连贯地协同工作。</p><p>开发人员通常认为集成测试可以被取消优先级甚至跳过，以支持完整的端到端测试。毕竟，后者真正测试了用户会使用它的产品。然而，拥有一套全面的集成测试与拥有坚实的单元测试基础同样重要（请参阅早期的 Google 博客文章，<a href="https://testing.googleblog.com/2020/11/fixing-test-hourglass.html">修复测试沙漏</a>）。</p><p>原因在于集成测试比完整的端到端测试具有更少的依赖性。因此，具有较小环境的集成测试将比具有全套依赖关系的完整端到端测试更快、更可靠（请参阅早期的 Google 博客文章，<a href="https://testing.googleblog.com/2020/12/test-flakiness-one-of-main-challenges.html">Test Fakiness - One of the Main自动化测试的挑战</a>）。</p><h2 id="对关键用户旅程执行端到端测试"><a href="#对关键用户旅程执行端到端测试" class="headerlink" title="对关键用户旅程执行端到端测试"></a>对关键用户旅程执行端到端测试</h2><p>到目前为止的讨论涵盖了在其组件级别测试产品，首先作为单个组件（单元测试），然后作为组件和依赖项组（集成测试）。现在是时候像用户使用它一样端到端地测试产品了。这非常重要，因为不仅要测试独立的功能，还要测试包含各种功能的整个工作流程。在谷歌，这些工作流程——关键目标和用户为实现该目标而执行的任务旅程的组合——被称为关键用户旅程 (CUJ)。了解 CUJ，记录它们，然后使用端到端测试（希望以自动化方式）验证它们完成了<a href="https://docs.google.com/presentation/d/15gNk21rjer3xo-b1ZqyQVGebOp_aPvHU3YH7YnOMxtE/edit#slide=id.g437663ce1_53_98">测试金字塔</a>。</p><h2 id="了解并实施其他测试层"><a href="#了解并实施其他测试层" class="headerlink" title="了解并实施其他测试层"></a>了解并实施其他测试层</h2><p>单元、集成和端到端测试解决了产品的功能级别。了解其他测试层级很重要，包括：</p><ul><li>性能测试 - 测量应用程序或服务的延迟或吞吐量。</li><li>负载和可扩展性测试 - 在越来越高的负载下测试您的应用程序或服务。</li><li>容错测试 - 测试您的应用程序的行为，因为不同的依赖关系要么失败，要么完全崩溃。</li><li>安全测试 - 测试您的服务或应用程序中的已知漏洞。</li><li>可访问性测试 - 确保每个人都可以访问和使用该产品，包括各种残障人士。</li><li>本地化测试 - 确保产品可以在特定语言或地区使用。</li><li>全球化测试——确保产品可以被世界各地的人们使用。</li><li>隐私测试 - 评估和减轻产品中的隐私风险。</li><li>可用性测试 - 测试用户友好性。</li></ul><p>同样，重要的是要在您的审查周期中尽早进行这些测试过程。较小的性能测试可以更早地检测到回归并在端到端测试期间节省调试时间。</p><h2 id="了解您的代码和功能覆盖范围"><a href="#了解您的代码和功能覆盖范围" class="headerlink" title="了解您的代码和功能覆盖范围"></a>了解您的代码和功能覆盖范围</h2><p>到目前为止，已经从定性的角度研究了多少测试就足够的问题。对不同类型的测试进行了审查，并提出较小和较早的论点比较大或较晚更好。现在将从定量的角度研究这个问题，同时考虑代码覆盖技术。</p><p>Wikipedia 有一篇关于<a href="https://en.wikipedia.org/wiki/Code_coverage">代码覆盖率</a>的精彩文章，概述并讨论了不同类型的覆盖率，包括语句、边缘、分支和条件覆盖率。有几种开源工具可用于测量大多数流行编程语言（如 Java、C++、Go 和 Python）的覆盖率。下表包含部分列表：</p><table><thead><tr><th>Language</th><th>Tool</th></tr></thead><tbody><tr><td>Java</td><td>JaCoCo</td></tr><tr><td>Java</td><td>JCov</td></tr><tr><td>Java</td><td>OpenClover</td></tr><tr><td>Python</td><td>Coverage.py</td></tr><tr><td>C++</td><td>Bullseye</td></tr><tr><td>Go</td><td>Built in coverage support (go -cover)</td></tr></tbody></table><p>表 1 - 不同语言的开源覆盖工具</p><p>这些工具中的大多数都以百分比形式提供摘要。例如，80% 的代码覆盖率意味着<em>大约</em>80% 的代码被覆盖，<em>大约</em>20% 的代码未被覆盖。同时，重要的是要理解，仅仅因为你覆盖了特定的代码区域，这段代码仍然可能有错误。</p><p>覆盖的另一个概念称为变更列表覆盖。更改列表覆盖率测量更改或添加的行中的覆盖率。对于积累了技术债务并且在整个代码库中覆盖率低的团队来说，它很有用。这些团队可以制定一项政策，增加他们的增量覆盖范围将导致整体改进。</p><p>到目前为止，覆盖讨论集中在测试（函数、行等）对代码的覆盖。另一种类型的覆盖是特征覆盖或行为覆盖。对于功能覆盖，重点是识别特定版本中已提交的功能并为其实现创建测试。对于行为覆盖，重点是识别 CUJ 并创建适当的测试来跟踪它们。同样，了解您“未发现”的特征和行为可能是您了解风险的有用指标。</p><h2 id="使用现场反馈来改进您的流程"><a href="#使用现场反馈来改进您的流程" class="headerlink" title="使用现场反馈来改进您的流程"></a>使用现场反馈来改进您的流程</h2><p>了解和改进您的资格认证过程的一个非常重要的部分是软件发布后从现场收到的反馈。拥有一个跟踪中断、错误和其他问题的流程，以改进资格的行动项目的形式，对于最大限度地减少后续版本中的回归风险至关重要。此外，行动项目应该（1）强调在资格认证过程中尽早填补测试空白，（2）解决战略问题，例如缺乏特定类型的测试，例如负载或容错测试. 同样，这就是为什么记录您的资格认证过程很重要，以便您可以根据从现场获得的数据重新评估它。</p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>创建全面的资格认证流程和测试策略来回答“多少测试才足够？”这个问题。可能是一项复杂的任务。希望这里给出的提示可以帮助您。总之：</p><ul><li>记录您的流程或策略。</li><li>有坚实的单元测试基础。</li><li>不要吝啬集成测试。</li><li>对关键用户旅程执行端到端测试。</li><li>了解并实施其他测试层级。</li><li>了解您的代码和功能覆盖范围。</li><li>使用来自现场的反馈来改进您的流程。</li></ul><h4 id="原文链接：https-testing-googleblog-com-2021-06-how-much-testing-is-enough-html-m-1"><a href="#原文链接：https-testing-googleblog-com-2021-06-how-much-testing-is-enough-html-m-1" class="headerlink" title="原文链接：https://testing.googleblog.com/2021/06/how-much-testing-is-enough.html?m=1"></a>原文链接：<a href="https://testing.googleblog.com/2021/06/how-much-testing-is-enough.html?m=1">https://testing.googleblog.com/2021/06/how-much-testing-is-enough.html?m=1</a></h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;每个软件开发人员和团队都在努力解决的一个熟悉的问题是，“多少测试足以使软件版本合格？” 很大程度上取决于软件的类型、用途和目标受众。人们会期望一种比简单的智能手机手电筒应用程序更严格的测试商业搜索引擎的方法。然而，无论是什么应用，多少测试才足够的问题很难用明确的术语来回答。更好的方法是提供可用于定义最适合手头案例的认证过程和测试策略的考虑因素或经验法则。以下提示提供了一个有用的标准：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录您的流程或策略。&lt;/li&gt;
&lt;li&gt;有坚实的单元测试基础。&lt;/li&gt;
&lt;li&gt;不要吝啬集成测试。&lt;/li&gt;
&lt;li&gt;对关键用户旅程执行端到端测试。&lt;/li&gt;
&lt;li&gt;了解并实施其他测试层级。&lt;/li&gt;
&lt;li&gt;了解您的代码和功能覆盖范围。&lt;/li&gt;
&lt;li&gt;使用来自现场的反馈来改进您的流程。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术分享" scheme="https://naod.com.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="软件测试" scheme="https://naod.com.cn/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    <category term="测试覆盖率" scheme="https://naod.com.cn/tags/%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87/"/>
    
    <category term="单元测试" scheme="https://naod.com.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Cypress UI自动化测试框架学习（4）- 数据驱动，方法封装参数化和测试框架</title>
    <link href="https://naod.com.cn/2021/06/02/Cypress-UI-Automation-Testing-Framework-Learning-Data-Driven-Method-Wrapping-Parameterization-and-Testing-Framework/"/>
    <id>https://naod.com.cn/2021/06/02/Cypress-UI-Automation-Testing-Framework-Learning-Data-Driven-Method-Wrapping-Parameterization-and-Testing-Framework/</id>
    <published>2021-06-02T14:18:43.000Z</published>
    <updated>2022-02-10T07:12:36.376Z</updated>
    
    <content type="html"><![CDATA[<p>数据驱动，方法封装参数化和测试框架相关介绍</p><span id="more"></span><h2 id="测试数据驱动"><a href="#测试数据驱动" class="headerlink" title="测试数据驱动"></a>测试数据驱动</h2><h3 id="js格式测试数据驱动"><a href="#js格式测试数据驱动" class="headerlink" title="js格式测试数据驱动"></a>js格式测试数据驱动</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>数据以js格式存储，使用js的import方法导入使用</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h5 id="新建测试数据js文件"><a href="#新建测试数据js文件" class="headerlink" title="新建测试数据js文件"></a>新建测试数据js文件</h5><ul><li><p>示例：在项目的cypress&#x2F;integration 文件夹下新建testData目录,然后在该目录下创建一个js文件，示例文件名为：testLogin.data.js</p></li><li><p>testLogin.data.js示例代码如下：</p></li></ul><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//账号密码记得换成自己的</span><br>export const testLoginUserEmail = [<br><br>    &#123;<br><span class="hljs-symbol">        summary:</span> <span class="hljs-string">&quot;正确邮箱账号登录验证&quot;</span>,<br><span class="hljs-symbol">        username:</span><span class="hljs-string">&quot;dengnao.123@163.com&quot;</span>,<br><span class="hljs-symbol">        password:</span><span class="hljs-string">&quot;xxxx&quot;</span><br>    &#125;<br>]<br><br>export const testLoginUserId = [<br><br>    &#123;<br><span class="hljs-symbol">        summary:</span> <span class="hljs-string">&quot;正确id账号登录验证&quot;</span>,<br><span class="hljs-symbol">        username:</span><span class="hljs-string">&quot;waitnoww&quot;</span>,<br><span class="hljs-symbol">        password:</span><span class="hljs-string">&quot;xxxx&quot;</span><br>    &#125;<br>]<br>export const testLoginUserMobilephone = [<br><br>    &#123;<br><span class="hljs-symbol">        summary:</span> <span class="hljs-string">&quot;正确手机号账号登录验证&quot;</span>,<br><span class="hljs-symbol">        username:</span><span class="hljs-string">&quot;18888139031&quot;</span>,<br><span class="hljs-symbol">        password:</span><span class="hljs-string">&quot;xxxx&quot;</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure><h5 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h5><ul><li><p>在项目cypress&#x2F;integration文件夹下新建js测试用例文件，示例文件名为：testLogin_guanggoo_data_by_js.js</p></li><li><p>示例代码如下：</p></li></ul><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 导入js文件获取测试数据<br>import &#123;<br>    testLoginUserEmail,<br>    testLoginUserId,<br>    testLoginUserMobilephone<br>&#125; from <span class="hljs-string">&quot;./testData/testLogin.data&quot;</span>;<br><br><br><span class="hljs-regexp">//</span> 测试用例<br>describe(<span class="hljs-string">&quot;光谷社区登录验证&quot;</span>, <span class="hljs-keyword">function</span> () &#123;<br><br>    <span class="hljs-regexp">//</span> 执行用例执行用例之前先进入首页<br>    beforeEach(<span class="hljs-keyword">function</span> () &#123;<br>        <span class="hljs-regexp">//</span> 访问并登录光谷社区<br>        cy.visit(<span class="hljs-string">&#x27;http://www.guanggoo.com/&#x27;</span>) <span class="hljs-regexp">//</span>访问url<br>        cy.url().should(<span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;www.guanggoo.com&#x27;</span>) <span class="hljs-regexp">//</span>验证目标url 是否正确包含光谷社区正确域名 验证是否正确跳转到光谷社区页面<br>        cy.title().should(<span class="hljs-string">&#x27;contain&#x27;</span>, <span class="hljs-string">&#x27;光谷社区&#x27;</span>) <span class="hljs-regexp">//</span>验证页面 title 是否正确<br>    &#125;)<br><br>    <span class="hljs-regexp">//</span>正确邮箱账号登录<br>    it(testLoginUserEmail[<span class="hljs-number">0</span>].summary, <span class="hljs-keyword">function</span> () &#123;<br>        cy.get(<span class="hljs-string">&#x27;:nth-child(1) &gt; .nav-collapse&#x27;</span>).click() <span class="hljs-regexp">//</span>点击登录按钮<br>        cy.url().should(<span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;login&#x27;</span>) <span class="hljs-regexp">//</span>验证正确跳转到登录页面<br>        cy.get(<span class="hljs-string">&#x27;#email&#x27;</span>) <span class="hljs-regexp">//</span>根据 css 定位用户名输入框<br>            .type(testLoginUserEmail[<span class="hljs-number">0</span>].username) <span class="hljs-regexp">//</span>输入邮箱用户名<br>        cy.get(<span class="hljs-string">&#x27;#password&#x27;</span>) <span class="hljs-regexp">//</span>根据 css 定位密码输入框<br>            .type(testLoginUserEmail[<span class="hljs-number">0</span>].password) <span class="hljs-regexp">//</span>输入密码<br>        cy.get(<span class="hljs-string">&#x27;.btn-success&#x27;</span>).click() <span class="hljs-regexp">//</span>点击登录按钮<br>        cy.get(<span class="hljs-string">&#x27;.ui-header &gt; .username&#x27;</span>)<br>            .should(<span class="hljs-string">&#x27;have.text&#x27;</span>, <span class="hljs-string">&#x27;waitnoww&#x27;</span>) <span class="hljs-regexp">//</span>验证登录正确返回到首页，登录信息返回正确<br>    &#125;),<br><br>    <span class="hljs-regexp">//</span>正确ID账号登录<br>    it(testLoginUserId[<span class="hljs-number">0</span>].summary, <span class="hljs-keyword">function</span> () &#123;<br>        cy.get(<span class="hljs-string">&#x27;:nth-child(1) &gt; .nav-collapse&#x27;</span>).click() <span class="hljs-regexp">//</span>点击登录按钮<br>        cy.url().should(<span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;login&#x27;</span>) <span class="hljs-regexp">//</span>验证正确跳转到登录页面<br>        cy.get(<span class="hljs-string">&#x27;#email&#x27;</span>) <span class="hljs-regexp">//</span>根据 css 定位用户名输入框<br>            .type(testLoginUserId[<span class="hljs-number">0</span>].username) <span class="hljs-regexp">//</span>输入ID用户名<br>        cy.get(<span class="hljs-string">&#x27;#password&#x27;</span>) <span class="hljs-regexp">//</span>根据 css 定位密码输入框<br>            .type(testLoginUserId[<span class="hljs-number">0</span>].password) <span class="hljs-regexp">//</span>输入密码<br>        cy.get(<span class="hljs-string">&#x27;.btn-success&#x27;</span>).click() <span class="hljs-regexp">//</span>点击登录按钮<br>        cy.get(<span class="hljs-string">&#x27;.ui-header &gt; .username&#x27;</span>)<br>            .should(<span class="hljs-string">&#x27;have.text&#x27;</span>, <span class="hljs-string">&#x27;waitnoww&#x27;</span>) <span class="hljs-regexp">//</span>验证登录正确返回到首页，登录信息返回正确<br>    &#125;),<br><br>    <span class="hljs-regexp">//</span>正确手机账号登录<br>    it(testLoginUserMobilephone[<span class="hljs-number">0</span>].summary, <span class="hljs-keyword">function</span> () &#123;<br>        cy.get(<span class="hljs-string">&#x27;:nth-child(1) &gt; .nav-collapse&#x27;</span>).click() <span class="hljs-regexp">//</span>点击登录按钮<br>        cy.url().should(<span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;login&#x27;</span>) <span class="hljs-regexp">//</span>验证正确跳转到登录页面<br>        cy.get(<span class="hljs-string">&#x27;#email&#x27;</span>) <span class="hljs-regexp">//</span>根据 css 定位用户名输入框<br>            .type(testLoginUserMobilephone[<span class="hljs-number">0</span>].username) <span class="hljs-regexp">//</span>输入手机号用户名<br>        cy.get(<span class="hljs-string">&#x27;#password&#x27;</span>) <span class="hljs-regexp">//</span>根据 css 定位密码输入框<br>            .type(testLoginUserMobilephone[<span class="hljs-number">0</span>].password) <span class="hljs-regexp">//</span>输入密码<br>        cy.get(<span class="hljs-string">&#x27;.btn-success&#x27;</span>).click() <span class="hljs-regexp">//</span>点击登录按钮<br>        cy.get(<span class="hljs-string">&#x27;.ui-header &gt; .username&#x27;</span>)<br>            .should(<span class="hljs-string">&#x27;have.text&#x27;</span>, <span class="hljs-string">&#x27;waitnoww&#x27;</span>) <span class="hljs-regexp">//</span>验证登录正确返回到首页，登录信息返回正确<br>    &#125;)<br><br>        <span class="hljs-regexp">//</span> 执行用例执行用例之后清除登录信息<br>        afterEach(<span class="hljs-keyword">function</span> () &#123;<br>            <span class="hljs-regexp">//</span> 清除cookies<br>            cy.clearCookies()<br>        &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="运行测试用例"><a href="#运行测试用例" class="headerlink" title="运行测试用例"></a>运行测试用例</h5><ul><li>运行脚本：npm run cypress:open</li><li>点击运行testLogin_guanggoo_data_by_js.js用例</li><li>查看运行结果(测试数据能正常获取到):<br><img src="https://raw.githubusercontent.com/waitnoww/hexoblogimg/master/img/20210602172618.png"></li></ul><h3 id="fixture测试数据驱动介绍"><a href="#fixture测试数据驱动介绍" class="headerlink" title="fixture测试数据驱动介绍"></a>fixture测试数据驱动介绍</h3><blockquote><p>fixture数据驱动方式是cypress框架推荐的方法，支持的格式也很多，如.json&#x2F;txt&#x2F;html&#x2F;jpg&#x2F;gif&#x2F;mp3&#x2F;zip等，具体可参考：<a href="https://docs.cypress.io/api/commands/fixture">https://docs.cypress.io/api/commands/fixture</a></p></blockquote><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>Cypress使用cypress&#x2F;fixture目录存放json文件数据，cy.fixture() 加载测试数据，如果不指定文件路径，默认从cypress&#x2F;fixtures文件下去查找，也可以自己设置文件路径</p><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><blockquote><p>以json格式读取举例介绍</p></blockquote><h5 id="新建测试数据json文件"><a href="#新建测试数据json文件" class="headerlink" title="新建测试数据json文件"></a>新建测试数据json文件</h5><ul><li><p>示例：在项目的cypress&#x2F;fixtures 文件夹下新建一个json文件，示例文件名为：testLoginData.json</p></li><li><p>testLoginData.json示例代码如下（账号密码记得换成自己的）：</p></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;testLoginUserEmail&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;summary&quot;</span>: <span class="hljs-string">&quot;正确邮箱账号登录验证&quot;</span>,<br>        <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;dengnao.123@163.com&quot;</span>,<br>        <span class="hljs-attr">&quot;password&quot;</span>: <span class="hljs-string">&quot;xxxx&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;testLoginUserId&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;summary&quot;</span>: <span class="hljs-string">&quot;正确id账号登录验证&quot;</span>,<br>        <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;waitnoww&quot;</span>,<br>        <span class="hljs-attr">&quot;password&quot;</span>: <span class="hljs-string">&quot;xxxx&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;testLoginUserMobilephone&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;summary&quot;</span>: <span class="hljs-string">&quot;正确手机号账号登录验证&quot;</span>,<br>        <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;18888889031&quot;</span>,<br>        <span class="hljs-attr">&quot;password&quot;</span>: <span class="hljs-string">&quot;xxxx&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="编写测试用例-1"><a href="#编写测试用例-1" class="headerlink" title="编写测试用例"></a>编写测试用例</h5><ul><li><p>在项目cypress&#x2F;integration文件夹下新建js测试用例文件，示例文件名为：testLogin_guanggoo_data_by_fixture.js</p></li><li><p>示例代码如下：</p></li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 测试用例</span><br><span class="hljs-function"><span class="hljs-title">describe</span><span class="hljs-params">(<span class="hljs-string">&quot;光谷社区登录验证&quot;</span>, function ()</span></span> &#123;<br><br>    <span class="hljs-comment">// 执行用例执行用例之前先进入首页</span><br>    beforeEach(function () &#123;<br>        <span class="hljs-comment">// 访问并登录光谷社区</span><br>        cy<span class="hljs-selector-class">.visit</span>(<span class="hljs-string">&#x27;http://www.guanggoo.com/&#x27;</span>) <span class="hljs-comment">//访问url</span><br>        cy<span class="hljs-selector-class">.url</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;www.guanggoo.com&#x27;</span>) <span class="hljs-comment">//验证目标url 是否正确包含光谷社区正确域名 验证是否正确跳转到光谷社区页面</span><br>        cy<span class="hljs-selector-class">.title</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;contain&#x27;</span>, <span class="hljs-string">&#x27;光谷社区&#x27;</span>) <span class="hljs-comment">//验证页面 title 是否正确</span><br>        <span class="hljs-comment">// 获取测试数据</span><br>        cy<span class="hljs-selector-class">.fixture</span>(<span class="hljs-string">&#x27;testLoginData.json&#x27;</span>)<span class="hljs-selector-class">.as</span>(<span class="hljs-string">&#x27;loginData&#x27;</span>)<br>    &#125;)<br><br>    <span class="hljs-comment">//正确邮箱账号登录</span><br>    it(<span class="hljs-string">&quot;正确邮箱账号登录验证&quot;</span>, function () &#123;<br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;:nth-child(1) &gt; .nav-collapse&#x27;</span>)<span class="hljs-selector-class">.click</span>() <span class="hljs-comment">//点击登录按钮</span><br>        cy<span class="hljs-selector-class">.url</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;login&#x27;</span>) <span class="hljs-comment">//验证正确跳转到登录页面</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;#email&#x27;</span>) <span class="hljs-comment">//根据 css 定位用户名输入框</span><br>            <span class="hljs-selector-class">.type</span>(this<span class="hljs-selector-class">.loginData</span><span class="hljs-selector-class">.testLoginUserEmail</span>.username) <span class="hljs-comment">//输入邮箱用户名</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;#password&#x27;</span>) <span class="hljs-comment">//根据 css 定位密码输入框</span><br>            <span class="hljs-selector-class">.type</span>(this<span class="hljs-selector-class">.loginData</span><span class="hljs-selector-class">.testLoginUserEmail</span>.password) <span class="hljs-comment">//输入密码</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;.btn-success&#x27;</span>)<span class="hljs-selector-class">.click</span>() <span class="hljs-comment">//点击登录按钮</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;.ui-header &gt; .username&#x27;</span>)<br>            <span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;have.text&#x27;</span>, <span class="hljs-string">&#x27;waitnoww&#x27;</span>) <span class="hljs-comment">//验证登录正确返回到首页，登录信息返回正确</span><br>    &#125;),<br><br>    <span class="hljs-comment">//正确ID账号登录</span><br>    it(<span class="hljs-string">&quot;正确id账号登录验证&quot;</span>, function () &#123;<br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;:nth-child(1) &gt; .nav-collapse&#x27;</span>)<span class="hljs-selector-class">.click</span>() <span class="hljs-comment">//点击登录按钮</span><br>        cy<span class="hljs-selector-class">.url</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;login&#x27;</span>) <span class="hljs-comment">//验证正确跳转到登录页面</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;#email&#x27;</span>) <span class="hljs-comment">//根据 css 定位用户名输入框</span><br>            <span class="hljs-selector-class">.type</span>(this<span class="hljs-selector-class">.loginData</span><span class="hljs-selector-class">.testLoginUserId</span>.username) <span class="hljs-comment">//输入ID用户名</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;#password&#x27;</span>) <span class="hljs-comment">//根据 css 定位密码输入框</span><br>            <span class="hljs-selector-class">.type</span>(this<span class="hljs-selector-class">.loginData</span><span class="hljs-selector-class">.testLoginUserId</span>.password) <span class="hljs-comment">//输入密码</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;.btn-success&#x27;</span>)<span class="hljs-selector-class">.click</span>() <span class="hljs-comment">//点击登录按钮</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;.ui-header &gt; .username&#x27;</span>)<br>            <span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;have.text&#x27;</span>, <span class="hljs-string">&#x27;waitnoww&#x27;</span>) <span class="hljs-comment">//验证登录正确返回到首页，登录信息返回正确</span><br>    &#125;),<br><br>    <span class="hljs-comment">//正确手机账号登录</span><br>    it(<span class="hljs-string">&quot;正确手机号账号登录验证&quot;</span>, function () &#123;<br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;:nth-child(1) &gt; .nav-collapse&#x27;</span>)<span class="hljs-selector-class">.click</span>() <span class="hljs-comment">//点击登录按钮</span><br>        cy<span class="hljs-selector-class">.url</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;login&#x27;</span>) <span class="hljs-comment">//验证正确跳转到登录页面</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;#email&#x27;</span>) <span class="hljs-comment">//根据 css 定位用户名输入框</span><br>            <span class="hljs-selector-class">.type</span>(this<span class="hljs-selector-class">.loginData</span><span class="hljs-selector-class">.testLoginUserMobilephone</span>.username) <span class="hljs-comment">//输入手机号用户名</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;#password&#x27;</span>) <span class="hljs-comment">//根据 css 定位密码输入框</span><br>            <span class="hljs-selector-class">.type</span>(this<span class="hljs-selector-class">.loginData</span><span class="hljs-selector-class">.testLoginUserMobilephone</span>.password) <span class="hljs-comment">//输入密码</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;.btn-success&#x27;</span>)<span class="hljs-selector-class">.click</span>() <span class="hljs-comment">//点击登录按钮</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;.ui-header &gt; .username&#x27;</span>)<br>            <span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;have.text&#x27;</span>, <span class="hljs-string">&#x27;waitnoww&#x27;</span>) <span class="hljs-comment">//验证登录正确返回到首页，登录信息返回正确</span><br>    &#125;)<br><br>        <span class="hljs-comment">// 执行用例执行用例之后清除登录信息</span><br>        afterEach(function () &#123;<br>            <span class="hljs-comment">// 清除cookies</span><br>            cy<span class="hljs-selector-class">.clearCookies</span>()<br>        &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="方法封装参数化"><a href="#方法封装参数化" class="headerlink" title="方法封装参数化"></a>方法封装参数化</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>cypress框架提供了一个commands.js可以自定义各种命令，用来封装各种通用方法，参数化方法，常用脚本等；</p><p>将常用的通用方法如登录方法在cypress&#x2F;support&#x2F;commands.js中编写完成之后，与cy.get()&#x2F;cy.visit()一样，可以直接用cy.xxx()形式调用，非常方便，减少维护成本</p><h3 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h3><blockquote><p>示例会介绍常用的参数化登录命令和进入首页命令</p></blockquote><h4 id="登录参数化登录封装"><a href="#登录参数化登录封装" class="headerlink" title="登录参数化登录封装"></a>登录参数化登录封装</h4><h5 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h5><ul><li>打开cypress&#x2F;support&#x2F;commands.js文件</li><li>输入如下代码：</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//将用户名和密码进行登录参数化</span><br>Cypress<span class="hljs-selector-class">.Commands</span><span class="hljs-selector-class">.add</span>(<span class="hljs-string">&quot;login&quot;</span>,(username,password) =&gt; &#123;<br>    cy<span class="hljs-selector-class">.clearCookies</span>() <span class="hljs-comment">//清除cookies,保证页面为未登录状态</span><br>    cy<span class="hljs-selector-class">.visit</span>(<span class="hljs-string">&#x27;http://www.guanggoo.com/&#x27;</span>) <span class="hljs-comment">//访问url</span><br>    cy<span class="hljs-selector-class">.url</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;www.guanggoo.com&#x27;</span>) <span class="hljs-comment">//验证目标url 是否正确包含光谷社区正确域名 验证是否正确跳转到光谷社区页面</span><br>    cy<span class="hljs-selector-class">.title</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;contain&#x27;</span>, <span class="hljs-string">&#x27;光谷社区&#x27;</span>) <span class="hljs-comment">//验证页面 title 是否正确</span><br>    cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;:nth-child(1) &gt; .nav-collapse&#x27;</span>)<span class="hljs-selector-class">.click</span>() <span class="hljs-comment">//点击登录按钮</span><br>    cy<span class="hljs-selector-class">.url</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;login&#x27;</span>) <span class="hljs-comment">//验证正确跳转到登录页面</span><br>    cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;#email&#x27;</span>) <span class="hljs-comment">//根据 css 定位用户名输入框</span><br>    <span class="hljs-selector-class">.type</span>(username) <span class="hljs-comment">//输入参数化的用户名</span><br>    cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;#password&#x27;</span>) <span class="hljs-comment">//根据 css 定位密码输入框</span><br>    <span class="hljs-selector-class">.type</span>(password) <span class="hljs-comment">//输入参数化的密码</span><br>    cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;.btn-success&#x27;</span>)<span class="hljs-selector-class">.click</span>() <span class="hljs-comment">//点击登录按钮</span><br>    cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;:nth-child(2) &gt; .nav-collapse&#x27;</span>)<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;contain&#x27;</span>, <span class="hljs-string">&#x27;设置&#x27;</span>) <span class="hljs-comment">//验证登录成功回到首页，设置按钮展示正确</span><br>    &#125;)<br></code></pre></td></tr></table></figure><h4 id="代码使用"><a href="#代码使用" class="headerlink" title="代码使用"></a>代码使用</h4><ul><li>在测试用例中可直接进行方法调用cy.login(username,password)换成自己的账号密码进行登录操作了</li></ul><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 账号密码须换成正确可用的<br>cy.login(<span class="hljs-string">&quot;dengnao.123@163.com&quot;</span>,<span class="hljs-string">&quot;xxxx&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="进入首页方法封装"><a href="#进入首页方法封装" class="headerlink" title="进入首页方法封装"></a>进入首页方法封装</h4><h5 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h5><ul><li>打开cypress&#x2F;support&#x2F;commands.js文件</li><li>输入如下代码：</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//进入首页</span><br>Cypress<span class="hljs-selector-class">.Commands</span><span class="hljs-selector-class">.add</span>(<span class="hljs-string">&quot;initHomePage&quot;</span>,() =&gt; &#123;<br>    cy<span class="hljs-selector-class">.visit</span>(<span class="hljs-string">&#x27;http://www.guanggoo.com/&#x27;</span>) <span class="hljs-comment">//访问url</span><br>    cy<span class="hljs-selector-class">.url</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;www.guanggoo.com&#x27;</span>) <span class="hljs-comment">//验证目标url 是否正确包含光谷社区正确域名 验证是否正确跳转到光谷社区页面</span><br>    cy<span class="hljs-selector-class">.title</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;contain&#x27;</span>, <span class="hljs-string">&#x27;光谷社区&#x27;</span>) <span class="hljs-comment">//验证页面 title 是否正确</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="代码使用-1"><a href="#代码使用-1" class="headerlink" title="代码使用"></a>代码使用</h4><ul><li>在测试用例中可直接进行方法调用cy.initHomePage()即可进入首页</li></ul><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 进入首页<br>cy.initHomePage()<br></code></pre></td></tr></table></figure><h2 id="测试框架介绍"><a href="#测试框架介绍" class="headerlink" title="测试框架介绍"></a>测试框架介绍</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>Cypress框架采用了Mocha框架的语法，故Mocha框架的测试语法可在cypress上直接使用</p><h3 id="语法介绍"><a href="#语法介绍" class="headerlink" title="语法介绍"></a>语法介绍</h3><h4 id="describe"><a href="#describe" class="headerlink" title="describe()"></a>describe()</h4><p>定义测试套件，里面还可以定义多个context或it</p><h4 id="context"><a href="#context" class="headerlink" title="context()"></a>context()</h4><p>定义测试套件，是describe()的别名，可以替代describe</p><h4 id="it"><a href="#it" class="headerlink" title="it()"></a>it()</h4><p>定义测试用例</p><h4 id="before"><a href="#before" class="headerlink" title="before()"></a>before()</h4><p>在一个测试套件中的所有测试用例之前执行，设置一些运行testcase的前置条件</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript">before(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// runs once before the first test in this block</span><br>  &#125;);<br></code></pre></td></tr></table></figure><h4 id="beforeEach"><a href="#beforeEach" class="headerlink" title="beforeEach()"></a>beforeEach()</h4><p>在每个测试用例之前执行</p><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">beforeEach</span><span class="hljs-params">(function ()</span></span> &#123;<br>    <span class="hljs-comment">// 访问并登录光谷社区</span><br>    cy<span class="hljs-selector-class">.visit</span>(<span class="hljs-string">&#x27;http://www.guanggoo.com/&#x27;</span>) <span class="hljs-comment">//访问url</span><br>    cy<span class="hljs-selector-class">.url</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;www.guanggoo.com&#x27;</span>) <span class="hljs-comment">//验证目标url 是否正确包含光谷社区正确域名 验证是否正确跳转到光谷社区页面</span><br>    cy<span class="hljs-selector-class">.title</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;contain&#x27;</span>, <span class="hljs-string">&#x27;光谷社区&#x27;</span>) <span class="hljs-comment">//验证页面 title 是否正确</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="afterEach"><a href="#afterEach" class="headerlink" title="afterEach()"></a>afterEach()</h4><p>在每个测试用例之后执行，可以执行清除数据等操作</p><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">afterEach</span><span class="hljs-params">(function ()</span></span> &#123;<br><span class="hljs-comment">// 清除cookies</span><br>cy<span class="hljs-selector-class">.clearCookies</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="after"><a href="#after" class="headerlink" title="after()"></a>after()</h4><p>在一个测试套件中的所有测试用例之后执行</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript">after(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">// runs once after the last test in this block</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="only"><a href="#only" class="headerlink" title=".only()"></a>.only()</h4><p>设置只执行某个testcase&#x2F;testsuite</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript">describe(<span class="hljs-string">&#x27;Array&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;<br>  describe.only(<span class="hljs-string">&#x27;#indexOf()&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="skip"><a href="#skip" class="headerlink" title=".skip()"></a>.skip()</h4><p>设置跳过执行某个testcase&#x2F;testsuite</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript">describe(<span class="hljs-string">&#x27;Array&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;<br>  describe(<span class="hljs-string">&#x27;#indexOf()&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;<br>    it.skip(<span class="hljs-string">&#x27;should return -1 unless present&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">// this test will not be run</span><br>    &#125;);<br><br>    it(<span class="hljs-string">&#x27;should return the index when present&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">// this test will be run</span><br>    &#125;);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h3><ul><li><a href="https://docs.cypress.io/guides/references/bundled-tools#Mocha">https://docs.cypress.io/guides/references/bundled-tools#Mocha</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据驱动，方法封装参数化和测试框架相关介绍&lt;/p&gt;</summary>
    
    
    
    <category term="技术分享" scheme="https://naod.com.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="软件测试" scheme="https://naod.com.cn/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    <category term="UI自动化测试" scheme="https://naod.com.cn/tags/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Cypress" scheme="https://naod.com.cn/tags/Cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress UI自动化测试框架学习（3）- 元素定位，操作和断言</title>
    <link href="https://naod.com.cn/2021/06/01/Cypress-UI-Automation-Testing-Framework-Learning-Element-Positioning-Operations-and-Assertions/"/>
    <id>https://naod.com.cn/2021/06/01/Cypress-UI-Automation-Testing-Framework-Learning-Element-Positioning-Operations-and-Assertions/</id>
    <published>2021-06-01T07:06:36.000Z</published>
    <updated>2022-02-10T07:15:00.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h2><p>谈到UI自动化测试，不管是web端还是移动端，页面元素的各种操作在编写测试脚本时都会涉及，如果想写出高通过率和高健壮性的自动化测试用例，必须要确保正确高效的页面元素识别和使用。</p><p>cypress框架除了支持常用的元素定位，还提供了好用的JQuery css选择器.</p><p>下面会介绍常用的元素定位方法，常用的定位方式，以及框架自带可视化自助元素定位方法</p><span id="more"></span><h3 id="常用元素定位"><a href="#常用元素定位" class="headerlink" title="常用元素定位"></a>常用元素定位</h3><h4 id="id定位"><a href="#id定位" class="headerlink" title="#id定位"></a>#id定位</h4><ul><li><p>描述：通过元素的 id 属性来定位</p></li><li><p>前提：定位的元素css样式须存在id属性且唯一</p></li></ul><p><code>//元素前端代码示例 &lt;input type=&quot;text&quot; id=&quot;email&quot; name=&quot;email&quot; placeholder=&quot;&quot; class=&quot;form-control&quot;&gt;</code></p><ul><li>示例代码<br><code>cy.get(&#39;#email&#39;)</code></li></ul><h4 id="class定位"><a href="#class定位" class="headerlink" title=".class定位"></a>.class定位</h4><ul><li><p>描述：通过元素的class属性来定位</p></li><li><p>前提：定位的元素css样式存在class属性且唯一</p></li></ul><p><code>//元素前端代码示例 &lt;a class=&quot;navbar-brand&quot; href=&quot;/&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;28&quot; border=&quot;0&quot; align=&quot;default&quot; alt=&quot;光谷社区&quot; src=&quot;http://cdn.guanggoo.com//static/images/guanggoonew.png&quot;&gt;&lt;/a&gt;</code></p><ul><li>示例代码</li></ul><p><code>cy.get(&#39;.navbar-brand&#39;)</code></p><h4 id="name定位"><a href="#name定位" class="headerlink" title="name定位"></a>name定位</h4><ul><li><p>描述：通过元素name定位</p></li><li><p>前提：定位的元素css样式存在name属性且唯一<br>&#96; &#x2F;&#x2F;元素前端代码示例</p><input type="text" id="email" name="email" placeholder="" class="form-control">`</li><li><p>示例代码</p></li></ul><p><code>cy.get(&#39;input[name=&quot;email&quot;]&#39;)</code></p><h3 id="常用定位方式"><a href="#常用定位方式" class="headerlink" title="常用定位方式"></a>常用定位方式</h3><h4 id="get"><a href="#get" class="headerlink" title=".get()"></a>.get()</h4><ul><li>描述：使用 get() 定位元素，定位元素用 CSS selectors ，跟 jQuery 一样</li><li>示例代码</li></ul><p><code>cy.get(&#39;#email&#39;)</code></p><h4 id="contains"><a href="#contains" class="headerlink" title=".contains()"></a>.contains()</h4><ul><li><p>描述：可以使用cy.contains（）根据元素的内容找到元素</p></li><li><p>示例代码</p></li></ul><p><code>cy.contains(‘value’) cy.get(‘div[name=“div_name”]’).contains(‘value’)</code></p><h4 id="within"><a href="#within" class="headerlink" title=".within()"></a>.within()</h4><ul><li><p>描述：可以在特定的DOM元素中找到元素</p></li><li><p>示例代码</p></li></ul><p><code>cy.get(&#39;.query-form&#39;).within(() =&gt; &#123;   cy.get(&#39;input:first&#39;).should(&#39;have.attr&#39;, &#39;placeholder&#39;, &#39;Email&#39;)   cy.get(&#39;input:last&#39;).should(&#39;have.attr&#39;, &#39;placeholder&#39;, &#39;Password&#39;) &#125;)</code></p><h4 id="Cypress"><a href="#Cypress" class="headerlink" title="Cypress.$"></a>Cypress.$</h4><ul><li><p>描述：Cypress 也提供了 JQuery 选择器，调用Cypress.$(‘button’）会自动在您的窗口中查询元素。 换句话说，Cypress 会自动将文档设置为您当前通过 cy.visit() 导航到的任何内容，这是从开发人员工具调试时同步查询元素的好方法。</p></li><li><p>示例代码</p></li></ul><p><code>Cypress.$(selector) // other proxied jQuery methods Cypress.$.Event Cypress.$.Deferred Cypress.$.ajax Cypress.$.get Cypress.$.getJSON Cypress.$.getScript Cypress.$.post</code></p><h3 id="框架自带可视化自助元素定位"><a href="#框架自带可视化自助元素定位" class="headerlink" title="框架自带可视化自助元素定位"></a>框架自带可视化自助元素定位</h3><ul><li>1.前提：demo代码已经跑起来(运行脚本：npm run cypress:open)</li></ul><p><img src="https://raw.githubusercontent.com/waitnoww/hexoblogimg/master/img/20210601152305.png"></p><ul><li>2.点击运行调试用例，进入定位元素对应的页面</li></ul><p><img src="https://raw.githubusercontent.com/waitnoww/hexoblogimg/master/img/20210601152419.png"></p><ul><li><p>3.在页面上选择瞄准镜标识（open selector playground）</p></li><li><p>4.选择页面上的元素区域,元素的定位信息就会展示在定位信息展示区域，点击复制就可使用</p></li></ul><p><img src="https://raw.githubusercontent.com/waitnoww/hexoblogimg/master/img/20210601152904.png"></p><h2 id="元素常用操作"><a href="#元素常用操作" class="headerlink" title="元素常用操作"></a>元素常用操作</h2><h3 id="click"><a href="#click" class="headerlink" title=".click()"></a>.click()</h3><ul><li><p>描述： 单击</p></li><li><p>示例代码</p></li></ul><p><code>cy.get(&#39;.btn-success&#39;).click()</code></p><h3 id="type-value"><a href="#type-value" class="headerlink" title=".type(value)"></a>.type(value)</h3><ul><li><p>描述： 输入内容</p></li><li><p>示例代码<br><code> </code>cy.get(‘input[name&#x3D;“username”]’).type(‘<a href="mailto:&#100;&#101;&#110;&#103;&#110;&#x61;&#111;&#x2e;&#49;&#x32;&#x33;&#64;&#x31;&#x36;&#51;&#x2e;&#99;&#x6f;&#109;">&#100;&#101;&#110;&#103;&#110;&#x61;&#111;&#x2e;&#49;&#x32;&#x33;&#64;&#x31;&#x36;&#51;&#x2e;&#99;&#x6f;&#109;</a>‘)&#96;&#96;</p></li></ul><h3 id="clear"><a href="#clear" class="headerlink" title=".clear()"></a>.clear()</h3><ul><li><p>描述：清空输入内容</p></li><li><p>示例代码</p></li></ul><p><code>cy.get(‘[type=“text”]’).clear()</code></p><h3 id="submit"><a href="#submit" class="headerlink" title=".submit()"></a>.submit()</h3><ul><li><p>描述：提交表单</p></li><li><p>示例代码</p></li></ul><p><code>cy.get(‘.ant-input’).submit()</code></p><h3 id="dbclick-x2F-rightclick"><a href="#dbclick-x2F-rightclick" class="headerlink" title=".dbclick()&#x2F;.rightclick()"></a>.dbclick()&#x2F;.rightclick()</h3><ul><li><p>描述：鼠标双击操作&#x2F;鼠标右击操作</p></li><li><p>示例代码</p></li></ul><p><code>cy.get(&#39;.menu&#39;).rightclick() // 鼠标右击 .menu菜单元素</code></p><h3 id="select"><a href="#select" class="headerlink" title=".select()"></a>.select()</h3><ul><li><p>描述：针对select元素选择一个选项</p></li><li><p>示例代码</p></li></ul><p><code>cy.get(&#39;color&#39;).select(&#39;red&#39;) // 颜色选项中选择红色</code></p><h3 id="check-x2F-uncheck"><a href="#check-x2F-uncheck" class="headerlink" title=".check()&#x2F;.uncheck()"></a>.check()&#x2F;.uncheck()</h3><ul><li><p>描述：单选或多选进行勾选&#x2F;取消选中(反选)</p></li><li><p>示例代码</p></li></ul><p><code>cy.get(&#39;[type=&quot;checkbox&quot;]&#39;).check() // 对checkbox进行选中操作 cy.get(&#39;[type=&quot;checkbox&quot;]&#39;).uncheck() // 对checkbox进行取消选中操作</code></p><h3 id="focus-x2F-blur"><a href="#focus-x2F-blur" class="headerlink" title=".focus()&#x2F;.blur()"></a>.focus()&#x2F;.blur()</h3><ul><li><p>描述：对选项进行聚焦&#x2F;失焦操作</p></li><li><p>示例代码</p></li></ul><p><code>cy.get(‘input[name=“username”]’).focus() //对于用户名输入框进行聚焦操作</code></p><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><h3 id="BDD断言"><a href="#BDD断言" class="headerlink" title="BDD断言"></a>BDD断言</h3><h4 id="断言类型"><a href="#断言类型" class="headerlink" title="断言类型"></a>断言类型</h4><h5 id="should-："><a href="#should-：" class="headerlink" title=".should()："></a>.should()：</h5><ul><li><p>描述：创建断言，断言会自动重试，直到它们通过或超时。</p></li><li><p>示例代码</p></li></ul><p><code>cy.get(‘.ant-checkbox).should(‘be.checked’)</code></p><h5 id="expect-："><a href="#expect-：" class="headerlink" title=".expect()："></a>.expect()：</h5><ul><li><p>描述：预期结果</p></li><li><p>示例代码</p></li></ul><p><code>expect(name).to.not.equal(‘dengnao.123@163.com’)</code></p><h4 id="常用断言"><a href="#常用断言" class="headerlink" title="常用断言"></a>常用断言</h4><blockquote><p>可参考官网文档:<a href="https://docs.cypress.io/guides/references/assertions#BDD-Assertions">https://docs.cypress.io/guides/references/assertions#BDD-Assertions</a></p></blockquote><p><img src="https://raw.githubusercontent.com/waitnoww/hexoblogimg/master/img/20210601161229.png"></p><h3 id="TDD断言"><a href="#TDD断言" class="headerlink" title="TDD断言"></a>TDD断言</h3><h4 id="断言类型-1"><a href="#断言类型-1" class="headerlink" title="断言类型"></a>断言类型</h4><h5 id="assert-："><a href="#assert-：" class="headerlink" title=".assert()："></a>.assert()：</h5><ul><li><p>描述：断言</p></li><li><p>示例代码</p></li></ul><p><code>assert.equal(3,3,’vals equal’)</code></p><h4 id="常用断言-1"><a href="#常用断言-1" class="headerlink" title="常用断言"></a>常用断言</h4><blockquote><p>可参考官网文档:<a href="https://docs.cypress.io/guides/references/assertions#TDD-Assertions">https://docs.cypress.io/guides/references/assertions#TDD-Assertions</a></p></blockquote><p><img src="https://raw.githubusercontent.com/waitnoww/hexoblogimg/master/img/20210601161926.png"></p><h3 id="常用断言-2"><a href="#常用断言-2" class="headerlink" title="常用断言"></a>常用断言</h3><h4 id="针对长度（length）的断言"><a href="#针对长度（length）的断言" class="headerlink" title="针对长度（length）的断言"></a>针对长度（length）的断言</h4><pre><code>`//重试,直到找到3个匹配的&lt;li.selected&gt;cy.get(&#39;li.selected&#39;).should(&#39;have.length&#39;,3)`</code></pre><h4 id="针对类（Class）的断言"><a href="#针对类（Class）的断言" class="headerlink" title="针对类（Class）的断言"></a>针对类（Class）的断言</h4><pre><code>`//重试,直到input元素没有类被disabled为止（或者超时为止）cy.get(&#39;from&#39;).fijd(&#39;input&#39;).should(&#39;not.have.class&#39;,&#39;disabled&#39;)`</code></pre><h4 id="针对值（Value）断言"><a href="#针对值（Value）断言" class="headerlink" title="针对值（Value）断言"></a>针对值（Value）断言</h4><pre><code>`//重试,直到textarea的值为‘iTesting’cy.get(&#39;textarea&#39;).should(&#39;have.value&#39;,&#39;iTesting&#39;)`</code></pre><h4 id="针对文本内容（Text-Content）的断言"><a href="#针对文本内容（Text-Content）的断言" class="headerlink" title="针对文本内容（Text Content）的断言"></a>针对文本内容（Text Content）的断言</h4><p><code>    //重试,直到这个span不包含“click me”字样     cy.get(&#39;a&#39;).parent(&#39;span.help&#39;).should(&#39;not.contain&#39;,&#39;click me&#39;)     //重试,直到这个span包含“click me”字样     cy.get(&#39;a&#39;).parent(&#39;span.help&#39;).should(&#39;contain&#39;,&#39;click me&#39;)</code></p><h4 id="针对元素可见与否（Visibility）的断言"><a href="#针对元素可见与否（Visibility）的断言" class="headerlink" title="针对元素可见与否（Visibility）的断言"></a>针对元素可见与否（Visibility）的断言</h4><p><code>//重试,直到这个button是可为止     cy.get(&#39;button&#39;).should(&#39;be.visible&#39;)</code></p><h4 id="针对元素存在与否（Existence）的断言"><a href="#针对元素存在与否（Existence）的断言" class="headerlink" title="针对元素存在与否（Existence）的断言"></a>针对元素存在与否（Existence）的断言</h4><p><code>//重试,直到id为loading的spinner不在存在     cy.get(&#39;#loading&#39;).should(&#39;not.exist&#39;)</code></p><h4 id="针对元素状态的（status）的断言"><a href="#针对元素状态的（status）的断言" class="headerlink" title="针对元素状态的（status）的断言"></a>针对元素状态的（status）的断言</h4><pre><code>`//重试,直到这个radio button是选中状态cy.get(&#39;：radio&#39;).should(&#39;be.checked&#39;)`</code></pre><h4 id="针对CSS的断言"><a href="#针对CSS的断言" class="headerlink" title="针对CSS的断言"></a>针对CSS的断言</h4><pre><code>`//重试,直到completed这个类有匹配的css为止cy.get(&#39;.completed&#39;).should(&#39;have.css&#39;,&#39;text-decoration&#39;,&#39;line-through&#39;)`</code></pre><h2 id="运行出错问题记录"><a href="#运行出错问题记录" class="headerlink" title="运行出错问题记录"></a>运行出错问题记录</h2><h4 id="运行npm-run-cypress-open报错，提示No-version-of-Cypress-is-installed"><a href="#运行npm-run-cypress-open报错，提示No-version-of-Cypress-is-installed" class="headerlink" title="运行npm run cypress:open报错，提示No version of Cypress is installed"></a>运行npm run cypress:open报错，提示No version of Cypress is installed</h4><h5 id="报错截图如下："><a href="#报错截图如下：" class="headerlink" title="报错截图如下："></a>报错截图如下：</h5><p><img src="https://raw.githubusercontent.com/waitnoww/hexoblogimg/master/img/20210601150230.png"></p><h5 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h5><p><code>//项目根目录下运行如下命令即可解决 ./node_modules/.bin/cypress install</code></p><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p> 电脑使用过清理软件，安装的cypress缓存信息被删除了，重新安装就好</p><h4 id="运行npm-run-cypress-open报错，提示Cypress-verification-timed-out"><a href="#运行npm-run-cypress-open报错，提示Cypress-verification-timed-out" class="headerlink" title="运行npm run cypress:open报错，提示Cypress verification timed out"></a>运行npm run cypress:open报错，提示Cypress verification timed out</h4><h5 id="报错截图如下：-1"><a href="#报错截图如下：-1" class="headerlink" title="报错截图如下："></a>报错截图如下：</h5><p> <img src="https://raw.githubusercontent.com/waitnoww/hexoblogimg/master/img/20210601151647.png"></p><h5 id="修复方式-1"><a href="#修复方式-1" class="headerlink" title="修复方式"></a>修复方式</h5><p>重新运行npm run cypress:open尝试即可</p><h5 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h5><p>电脑cypress验证超时了，一般重新操作即可恢复</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;元素定位&quot;&gt;&lt;a href=&quot;#元素定位&quot; class=&quot;headerlink&quot; title=&quot;元素定位&quot;&gt;&lt;/a&gt;元素定位&lt;/h2&gt;&lt;p&gt;谈到UI自动化测试，不管是web端还是移动端，页面元素的各种操作在编写测试脚本时都会涉及，如果想写出高通过率和高健壮性的自动化测试用例，必须要确保正确高效的页面元素识别和使用。&lt;/p&gt;
&lt;p&gt;cypress框架除了支持常用的元素定位，还提供了好用的JQuery css选择器.&lt;/p&gt;
&lt;p&gt;下面会介绍常用的元素定位方法，常用的定位方式，以及框架自带可视化自助元素定位方法&lt;/p&gt;</summary>
    
    
    
    <category term="技术分享" scheme="https://naod.com.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="软件测试" scheme="https://naod.com.cn/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    <category term="UI自动化测试" scheme="https://naod.com.cn/tags/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Cypress" scheme="https://naod.com.cn/tags/Cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress UI自动化测试框架学习（2）- 测试报告</title>
    <link href="https://naod.com.cn/2021/05/28/Cypress-UI-Automation-Test-Framework-Learning-Test-Report/"/>
    <id>https://naod.com.cn/2021/05/28/Cypress-UI-Automation-Test-Framework-Learning-Test-Report/</id>
    <published>2021-05-28T03:34:06.000Z</published>
    <updated>2022-02-10T07:09:48.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>由于Cypress测试报告是建立在Mocha测试报告之上的，这意味着任何为Mocha构建的报告程序都可以与Cypress一起使用。</p><p>以下是内置的Mocha测试类型列表（Cypress也同样支持）：<a href="https://mochajs.org/#reporters">https://mochajs.org/#reporters</a></p><span id="more"></span><h2 id="前置准备工作"><a href="#前置准备工作" class="headerlink" title="前置准备工作"></a>前置准备工作</h2><p>在package.json文件的scripts模块加入了如下脚本：”cypress:run”:”cypress run”，便于后面生成报告</p><p>不同运行脚本的区别：</p><ul><li>cypress run：是以无头浏览器模式跑测试用例文件夹下的所有测试用例</li><li>cypress open：会打开测试用例集的界面，需要手动运行</li></ul><h2 id="常用报告类型"><a href="#常用报告类型" class="headerlink" title="常用报告类型"></a>常用报告类型</h2><h3 id="spec格式报告"><a href="#spec格式报告" class="headerlink" title="spec格式报告"></a>spec格式报告</h3><ul><li>运行命令</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">$ npm <span class="hljs-builtin-name">run</span> cypress:<span class="hljs-builtin-name">run</span> <span class="hljs-attribute">--reporter</span>=spec<br></code></pre></td></tr></table></figure><ul><li>报告截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqx2v3ihu9j31ka0eojtc.jpg"></li></ul><h3 id="Dot格式报告"><a href="#Dot格式报告" class="headerlink" title="Dot格式报告"></a>Dot格式报告</h3><ul><li><p>前置：在cypress.json文件新增”reporter”: “dot”信息</p></li><li><p>运行方式：</p></li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">$ npm <span class="hljs-built_in">run</span> cypress:<span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><ul><li>报告截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy74s99hij30qo0800t5.jpg"></li></ul><h3 id="json格式报告"><a href="#json格式报告" class="headerlink" title="json格式报告"></a>json格式报告</h3><ul><li><p>前置：在cypress.json文件新增”reporter”: “json”信息</p></li><li><p>运行方式：</p></li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">$ npm <span class="hljs-built_in">run</span> cypress:<span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><ul><li>报告截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy6zo6iu9j30u00u644f.jpg"></li></ul><h3 id="List格式报告"><a href="#List格式报告" class="headerlink" title="List格式报告"></a>List格式报告</h3><ul><li><p>前置：在cypress.json文件新增”reporter”: “list”信息</p></li><li><p>运行方式：</p></li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">$ npm <span class="hljs-built_in">run</span> cypress:<span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><ul><li>报告截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy78or4xhj30v80by76y.jpg"></li></ul><h3 id="NYAN格式报告"><a href="#NYAN格式报告" class="headerlink" title="NYAN格式报告"></a>NYAN格式报告</h3><ul><li><p>前置：在cypress.json文件新增”reporter”: “nyan”信息</p></li><li><p>运行方式：</p></li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">$ npm <span class="hljs-built_in">run</span> cypress:<span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><ul><li>报告截图</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy7cxd155j30my09mq3k.jpg"></p><h2 id="高大上报告类型"><a href="#高大上报告类型" class="headerlink" title="高大上报告类型"></a>高大上报告类型</h2><h3 id="Mochawesome格式报告"><a href="#Mochawesome格式报告" class="headerlink" title="Mochawesome格式报告"></a>Mochawesome格式报告</h3><ul><li>前置：安装 Mocha、Mochawesome 至项目中</li></ul><figure class="highlight q"><table><tr><td class="code"><pre><code class="hljs q">npm install --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> mocha<br>npm install --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> mochawesome<br></code></pre></td></tr></table></figure><ul><li><p>在cypress.json文件新增”reporter”: “mochawesome”信息</p></li><li><p>运行命令</p></li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">$ npm <span class="hljs-built_in">run</span> cypress:<span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><ul><li>报告截图</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy7w33bfsj31xd0u0q78.jpg"></p><h3 id="allure格式报告"><a href="#allure格式报告" class="headerlink" title="allure格式报告"></a>allure格式报告</h3><ul><li>前置：安装 allure（推荐使用brew安装）</li></ul><figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>allure<br></code></pre></td></tr></table></figure><ul><li>在cypress.json文件新增如下信息</li></ul><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-string">&quot;reporter&quot;</span>: <span class="hljs-string">&quot;junit&quot;</span>,<br><span class="hljs-string">&quot;reporterOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;mochaFile&quot;</span>: <span class="hljs-string">&quot;results/test_report_[hash].xml&quot;</span>,<br>    <span class="hljs-string">&quot;toConsole&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>运行命令</li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">$ npm <span class="hljs-built_in">run</span> cypress:<span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><ul><li>生成报告</li></ul><figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>allure serve results <br></code></pre></td></tr></table></figure><ul><li>报告截图</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy9t4vp9xj31p80u044v.jpg"></p><h3 id="Dashboard格式报告"><a href="#Dashboard格式报告" class="headerlink" title="Dashboard格式报告"></a>Dashboard格式报告</h3><blockquote><p>待完善，参考资料：<a href="https://docs.cypress.io/guides/dashboard/introduction#Features">https://docs.cypress.io/guides/dashboard/introduction#Features</a></p></blockquote><ul><li>运行命令</li></ul><figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">$ npx cypress run --record --key <span class="hljs-number">7</span>aaee<span class="hljs-number">33</span>b-f<span class="hljs-number">67</span>b<span class="hljs-number">-4993</span><span class="hljs-number">-8</span>d<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">-2</span><span class="hljs-keyword">c</span><span class="hljs-number">392</span>a<span class="hljs-number">1</span>bd<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><ul><li>报告截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqya4w0n7xj31op0u0do2.jpg"></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;由于Cypress测试报告是建立在Mocha测试报告之上的，这意味着任何为Mocha构建的报告程序都可以与Cypress一起使用。&lt;/p&gt;
&lt;p&gt;以下是内置的Mocha测试类型列表（Cypress也同样支持）：&lt;a href=&quot;https://mochajs.org/#reporters&quot;&gt;https://mochajs.org/#reporters&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术分享" scheme="https://naod.com.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="软件测试" scheme="https://naod.com.cn/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    <category term="UI自动化测试" scheme="https://naod.com.cn/tags/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Cypress" scheme="https://naod.com.cn/tags/Cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress UI自动化测试框架学习（1）- 入门</title>
    <link href="https://naod.com.cn/2021/05/26/Cypress-UI-Automation-Testing-Framework-Learning-Getting-Started/"/>
    <id>https://naod.com.cn/2021/05/26/Cypress-UI-Automation-Testing-Framework-Learning-Getting-Started/</id>
    <published>2021-05-26T04:35:06.000Z</published>
    <updated>2022-02-10T07:09:42.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>基于 JavaScript 的前端自动化测试工具，可以对浏览器中运行的任何内容进行快速、简单、可靠的测试</p><p>Cypress 是自集成的，提供了一套完整的端到端测试，无须借助其他外部工具，安装后即可快速地创建、编写、运行测试用例，且对每一步操作都支持回看</p><p>不同于其他只能测试 UI 层的前端测试工具，Cypress 允许编写所有类型的测试，覆盖了测试金字塔模型的所有测试类型【界面测试，集成测试，单元测试】</p><span id="more"></span><p>Cypress官网：<a href="https://www.cypress.io/">https://www.cypress.io/</a></p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><blockquote><p>下面以MacOS来进行介绍，其他系统可参考官网信息</p></blockquote><h3 id="Operating-System"><a href="#Operating-System" class="headerlink" title="Operating System"></a>Operating System</h3><ul><li>macOS 10.9 and above (64-bit only)</li><li>Node.js 12 or 14 and above</li></ul><h3 id="Before-Started"><a href="#Before-Started" class="headerlink" title="Before Started"></a>Before Started</h3><ul><li>已安装好node.js和npm</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqvntxlww1j30k406waau.jpg"></p><ul><li>已安装好vs code或者其他代码编辑器</li></ul><h3 id="Started-and-Run"><a href="#Started-and-Run" class="headerlink" title="Started and Run"></a>Started and Run</h3><ul><li>Step1：通过npm新建项目</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 新建项目文件夹</span><br><span class="hljs-variable">$</span> mkdir cypress<span class="hljs-literal">-demo</span><br><span class="hljs-comment"># 进入项目文件夹</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> cypress<span class="hljs-literal">-demo</span><br><span class="hljs-comment"># npm项目环境准备</span><br><span class="hljs-variable">$</span> npm init<br></code></pre></td></tr></table></figure><ul><li>Step2：安装cypress</li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 项目安装cypress包</span><br>$ npm install cypress <span class="hljs-comment">--save-dev</span><br></code></pre></td></tr></table></figure><ul><li>Step3：运行cypress程序</li></ul><blockquote><p>若提示：npm ERR! missing script: cypress:open，可在项目根目录package.json文件的scripts下新增”cypress:open”: “cypress open”，保存后再次运行命令即可</p></blockquote><figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 启动demo</span><br>$ npm <span class="hljs-keyword">run</span> cypress:<span class="hljs-keyword">open</span><br></code></pre></td></tr></table></figure><h3 id="Started-Screenshot"><a href="#Started-Screenshot" class="headerlink" title="Started Screenshot"></a>Started Screenshot</h3><ul><li><p>运行截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqvsqw8ytcj323h0u0qp2.jpg"></p></li><li><p>demo用例执行截图<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqvsshqeflj31gl0u0nbf.jpg"></p></li></ul><h2 id="Try-First-Testscript"><a href="#Try-First-Testscript" class="headerlink" title="Try First Testscript"></a>Try First Testscript</h2><h3 id="Testcase"><a href="#Testcase" class="headerlink" title="Testcase"></a>Testcase</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.访问光谷社区主页http:<span class="hljs-regexp">//</span>www.guanggoo.com/<br><span class="hljs-number">2</span>.验证是否正确跳转到光谷社区页面<br><span class="hljs-number">3</span>.验证网页标题是否正确<br><span class="hljs-number">4</span>.点击登录按钮，验证正确跳转到登录页面<br><span class="hljs-number">5</span>.在登录页面输入用户名和输入密码<br><span class="hljs-number">6</span>.点击登录按钮，验证登录成功<br></code></pre></td></tr></table></figure><h3 id="Testscript"><a href="#Testscript" class="headerlink" title="Testscript"></a>Testscript</h3><ul><li><p>在项目cypress&#x2F;integration下新建demo文件夹</p></li><li><p>在demo文件夹下新建demo-guanggoo.js</p></li><li><p>demo-guanggoo.js编写测试脚本</p></li></ul><blockquote><p>脚本中账号密码需换成自己的账号密码</p></blockquote><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">describe</span><span class="hljs-params">(<span class="hljs-string">&#x27;first testcase for cypress&#x27;</span>,function()</span></span>&#123;<br>    it(<span class="hljs-string">&#x27;visit guanggoo homepage and login for guanggoo:&#x27;</span>,function()&#123;<br><br>        <span class="hljs-comment">// 访问并登录光谷社区</span><br>        cy<span class="hljs-selector-class">.visit</span>(<span class="hljs-string">&#x27;http://www.guanggoo.com/&#x27;</span>) <span class="hljs-comment">//访问url</span><br>        cy<span class="hljs-selector-class">.url</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;include&#x27;</span>,<span class="hljs-string">&#x27;www.guanggoo.com&#x27;</span>)     <span class="hljs-comment">//验证目标url 是否正确包含光谷社区正确域名 验证是否正确跳转到光谷社区页面</span><br>        cy<span class="hljs-selector-class">.title</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;contain&#x27;</span>,<span class="hljs-string">&#x27;光谷社区&#x27;</span>)  <span class="hljs-comment">//验证页面 title 是否正确</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;:nth-child(1) &gt; .nav-collapse&#x27;</span>)<span class="hljs-selector-class">.click</span>()   <span class="hljs-comment">//点击登录按钮</span><br>        cy<span class="hljs-selector-class">.url</span>()<span class="hljs-selector-class">.should</span>(<span class="hljs-string">&#x27;include&#x27;</span>,<span class="hljs-string">&#x27;login&#x27;</span>)  <span class="hljs-comment">//验证正确跳转到登录页面</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;#email&#x27;</span>) <span class="hljs-comment">//根据 css 定位用户名输入框</span><br>        <span class="hljs-selector-class">.type</span>(<span class="hljs-string">&#x27;dengnao.123@163.com&#x27;</span>)        <span class="hljs-comment">//输入用户名</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;#password&#x27;</span>) <span class="hljs-comment">//根据 css 定位密码输入框</span><br>        <span class="hljs-selector-class">.type</span>(<span class="hljs-string">&#x27;xxxxxxx&#x27;</span>)        <span class="hljs-comment">//输入密码</span><br>        cy<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;.btn-success&#x27;</span>)<span class="hljs-selector-class">.click</span>()   <span class="hljs-comment">//点击登录按钮</span><br><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="Run-Screenshot"><a href="#Run-Screenshot" class="headerlink" title="Run Screenshot"></a>Run Screenshot</h3><ul><li>运行cypress程序</li></ul><figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 启动</span><br>$ npm <span class="hljs-keyword">run</span> cypress:<span class="hljs-keyword">open</span><br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqvtcq43csj323f0u0qn9.jpg"></p><ul><li>页面上选择点击运行demo-guanggoo.js即可</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqvtjib8jdj31g80u0e81.jpg"></p><ul><li>运行通过无报错，代表用例编写成功</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;基于 JavaScript 的前端自动化测试工具，可以对浏览器中运行的任何内容进行快速、简单、可靠的测试&lt;/p&gt;
&lt;p&gt;Cypress 是自集成的，提供了一套完整的端到端测试，无须借助其他外部工具，安装后即可快速地创建、编写、运行测试用例，且对每一步操作都支持回看&lt;/p&gt;
&lt;p&gt;不同于其他只能测试 UI 层的前端测试工具，Cypress 允许编写所有类型的测试，覆盖了测试金字塔模型的所有测试类型【界面测试，集成测试，单元测试】&lt;/p&gt;</summary>
    
    
    
    <category term="技术分享" scheme="https://naod.com.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="软件测试" scheme="https://naod.com.cn/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    <category term="UI自动化测试" scheme="https://naod.com.cn/tags/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Cypress" scheme="https://naod.com.cn/tags/Cypress/"/>
    
  </entry>
  
</feed>
